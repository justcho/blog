import{_ as a,o as s,c as o,U as l}from"./chunks/framework.316ef557.js";const y=JSON.parse('{"title":"CSS 汇总","description":"","frontmatter":{},"headers":[],"relativePath":"notes/css/css汇总.md","filePath":"notes/css/css汇总.md","lastUpdated":1690725674000}'),e={name:"notes/css/css汇总.md"},n=l(`<h1 id="css-汇总" tabindex="-1">CSS 汇总 <a class="header-anchor" href="#css-汇总" aria-label="Permalink to &quot;CSS 汇总&quot;">​</a></h1><h2 id="bfc-是什么" tabindex="-1">BFC 是什么 <a class="header-anchor" href="#bfc-是什么" aria-label="Permalink to &quot;BFC 是什么&quot;">​</a></h2><h3 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h3><p>块级格式化上下文</p><h3 id="怎么做" tabindex="-1">怎么做 <a class="header-anchor" href="#怎么做" aria-label="Permalink to &quot;怎么做&quot;">​</a></h3><ol><li>浮动元素（元素的 float 不是 none）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>行内块 inline block 元素</li><li>overflow 值不为 visible 的块元素</li><li>弹性元素（display为 flex 或 inline-flex元素的直接子元素）</li></ol><h3 id="解决了什么问题" tabindex="-1">解决了什么问题 <a class="header-anchor" href="#解决了什么问题" aria-label="Permalink to &quot;解决了什么问题&quot;">​</a></h3><ol><li>清除浮动（为什么不用 .clearfix 呢？）</li><li>防止 margin 合并</li><li>某些古老的布局方式会用到（已过时） 优点：无。</li></ol><h3 id="缺点-有副作用" tabindex="-1">缺点：有副作用 <a class="header-anchor" href="#缺点-有副作用" aria-label="Permalink to &quot;缺点：有副作用&quot;">​</a></h3><p>怎么解决缺点：使用最新的 display: flow-root 来触发 BFC 就没有副作用了，但是很多人不知道。</p><h3 id="css-选择器优先级如何确定" tabindex="-1">CSS 选择器优先级如何确定？ <a class="header-anchor" href="#css-选择器优先级如何确定" aria-label="Permalink to &quot;CSS 选择器优先级如何确定？&quot;">​</a></h3><p><a href="http://www.ayqy.net/doc/css2-1/cascade.html#specificity" target="_blank" rel="noreferrer">这里</a>有 CSS 2.1 规格文档的权威算法：（但并不适用于 CSS 3）</p><ol><li>选择器越具体，其优先级越高</li><li>相同优先级，出现在后面的，覆盖前面的</li><li>属性后面加 !important 的优先级最高，但是要少用</li></ol><h2 id="两种盒模型-box-sizing-的区别" tabindex="-1">两种盒模型（box-sizing）的区别？ <a class="header-anchor" href="#两种盒模型-box-sizing-的区别" aria-label="Permalink to &quot;两种盒模型（box-sizing）的区别？&quot;">​</a></h2><p>第一种盒模型是 <code>content-box</code>，即 <code>width</code> 指定的是 <code>content</code> 区域宽度，而不是实际宽度，公式为</p><blockquote><p>实际宽度 = width + padding + border</p></blockquote><p>第二种盒模型是 <code>border-box</code>，即 <code>width</code> 指定的是左右边框外侧的距离，公式为</p><blockquote><p>实际宽度 = width</p></blockquote><p>相同点是都是用来指定宽度的，不同点是 <code>border-box</code> 更好用。</p><h2 id="如何清除浮动" tabindex="-1">如何清除浮动？ <a class="header-anchor" href="#如何清除浮动" aria-label="Permalink to &quot;如何清除浮动？&quot;">​</a></h2><p>方法一，给父元素加上 <code>.clearfix</code></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">after</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#B2CCD6;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> block</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*或者 table*/</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#B2CCD6;">clear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> both</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#B2CCD6;">zoom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* IE 兼容*/</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>方法二，给父元素加上 <code>overflow:hidden</code> 。</p>`,23),t=[n];function c(p,r,i,d,h,C){return s(),o("div",null,t)}const b=a(e,[["render",c]]);export{y as __pageData,b as default};
