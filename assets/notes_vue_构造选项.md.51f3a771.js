import{_ as e,o as a,c as i,U as l}from"./chunks/framework.316ef557.js";const x=JSON.parse('{"title":"Vue 构造选项","description":"","frontmatter":{},"headers":[],"relativePath":"notes/vue/构造选项.md","filePath":"notes/vue/构造选项.md","lastUpdated":1689776313000}'),o={name:"notes/vue/构造选项.md"},s=l(`<h1 id="vue-构造选项" tabindex="-1">Vue 构造选项 <a class="header-anchor" href="#vue-构造选项" aria-label="Permalink to &quot;Vue 构造选项&quot;">​</a></h1><h2 id="directive指令-减少dom操作的重复" tabindex="-1"><code>Directive</code>指令：减少DOM操作的重复 <a class="header-anchor" href="#directive指令-减少dom操作的重复" aria-label="Permalink to &quot;\`Directive\`指令：减少DOM操作的重复&quot;">​</a></h2><ul><li>Vue实例/组件用于数据绑定、事件监听、DOM更新</li><li>Vue指令主要目的就是原生DOM操作</li><li>减少重复</li></ul><h2 id="自定义指令" tabindex="-1"><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#ad" target="_blank" rel="noreferrer">自定义指令</a> <a class="header-anchor" href="#自定义指令" aria-label="Permalink to &quot;[自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html#ad)&quot;">​</a></h2><h3 id="两种声明方式" tabindex="-1">两种声明方式 <a class="header-anchor" href="#两种声明方式" aria-label="Permalink to &quot;两种声明方式&quot;">​</a></h3><h4 id="方法一-声明一个全局指令" tabindex="-1">方法一：声明一个全局指令 <a class="header-anchor" href="#方法一-声明一个全局指令" aria-label="Permalink to &quot;方法一：声明一个全局指令&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> directiveOptions)</span></span></code></pre></div><h4 id="方法二-声明一个局部指令" tabindex="-1">方法二：声明一个局部指令 <a class="header-anchor" href="#方法二-声明一个局部指令" aria-label="Permalink to &quot;方法二：声明一个局部指令&quot;">​</a></h4><p>在options里写，只能被那个Vue实例/组件使用</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">directives</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">：directiveOptions</span></span>
<span class="line"><span style="color:#F07178;">    }</span></span>
<span class="line"><span style="color:#F07178;">})</span></span></code></pre></div><h5 id="关于directiveoptions" tabindex="-1">关于<code>directiveOptions</code> <a class="header-anchor" href="#关于directiveoptions" aria-label="Permalink to &quot;关于\`directiveOptions\`&quot;">​</a></h5><p><code>directiveOptions</code>是个对象，里面有五个函数属性</p><ol><li><code>bind(el, info, vnode, oldVnode)★</code></li></ol><ul><li><p>类似<code>created</code>，只调用一次，指令第一次绑定到元素时调用。</p></li><li><p>参数都是vue给我们的 ① <code>el</code>：绑定指令的那个元素 ② <code>info</code>：是个对象，我们想要的信息基本都在里面 ③ <code>vnode</code>：虚拟节点 ④ <code>oldVnode</code>：之前的虚拟节点</p></li></ul><ol start="2"><li><code>inserted(参数同上)★</code></li></ol><ul><li>类似<code>mounted</code>，被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li></ul><ol start="3"><li><code>update(参数同上)</code></li></ol><ul><li>类似 <code>updated</code></li></ul><ol start="4"><li><code>componentUpdated(参数同上)</code></li></ol><ul><li>用得不多，见文档</li></ul><ol start="5"><li><code>unbind(参数同上)★</code></li></ol><ul><li>类似<code>destroyed</code>，当元素要消亡时调用。</li></ul><p><a href="https://codesandbox.io/s/proud-feather-57n67" target="_blank" rel="noreferrer">bind示例</a></p><h2 id="mixins混入-复制" tabindex="-1">Mixins混入：复制 <a class="header-anchor" href="#mixins混入-复制" aria-label="Permalink to &quot;Mixins混入：复制&quot;">​</a></h2><p><a href="https://codesandbox.io/s/kind-rosalind-86iez" target="_blank" rel="noreferrer">Mixins示例</a></p><ul><li>减少重复</li><li>directives的作用是减少DOM操作的重复</li><li>mixins的作用是减少data、methods、钩子的重复</li><li>options里的构造选项都可以先放到一个js文件，之后哪个实例/组件需要就导入并且用mixins使用就行。</li></ul><p>写在了共同东西里的东西被组件引用了之后，组件还可以覆盖他们，Vue会智能合并</p><p><a href="https://cn.vuejs.org/v2/api/#Vue-mixin" target="_blank" rel="noreferrer">全局的mixins</a>：不推荐</p><h2 id="extends-继承、扩展" tabindex="-1">Extends 继承、扩展 <a class="header-anchor" href="#extends-继承、扩展" aria-label="Permalink to &quot;Extends 继承、扩展&quot;">​</a></h2><ul><li>extends是比mixins更抽象一点的封装</li><li>如果你嫌写五次mixins麻烦，可以考虑extends一次</li><li>不过实际工作中用得很少</li><li>你可以使用Vue.extend或options.extends</li></ul><h2 id="provide-inject-提供-注入" tabindex="-1">provide &amp; inject：提供&amp;注入 <a class="header-anchor" href="#provide-inject-提供-注入" aria-label="Permalink to &quot;provide &amp; inject：提供&amp;注入&quot;">​</a></h2><ul><li>祖先提供东西，后代注入东西</li><li>作用是大范围、隔N代共享信息(data、methods等)</li></ul><p><a href="https://codesandbox.io/s/fragrant-rain-h8lm6" target="_blank" rel="noreferrer">示例</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><h3 id="directive指令" tabindex="-1">directive指令 <a class="header-anchor" href="#directive指令" aria-label="Permalink to &quot;directive指令&quot;">​</a></h3><ul><li>全局用<code>Vue.directive(&#39;x&#39;, {...})</code></li><li>局部用<code>options.directives</code></li><li>作用是减少DOM操作相关重复代码</li></ul><h3 id="mixins混入" tabindex="-1">mixins混入 <a class="header-anchor" href="#mixins混入" aria-label="Permalink to &quot;mixins混入&quot;">​</a></h3><ul><li>全局用<code>Vue.mixin({..})</code></li><li>局部用<code>options.mixins: [mixin1, mixin2]</code></li><li>作用是减少options里的重复</li></ul><h3 id="extends继承-扩展" tabindex="-1">extends继承/扩展 <a class="header-anchor" href="#extends继承-扩展" aria-label="Permalink to &quot;extends继承/扩展&quot;">​</a></h3><ul><li>全局用<code>Vue.extend({.})</code></li><li>局部用<code>options.extends: {...}</code></li><li>作用跟mixins差不多，只是形式不同</li></ul><h3 id="provide-inject提供和注入" tabindex="-1">provide | inject提供和注入 <a class="header-anchor" href="#provide-inject提供和注入" aria-label="Permalink to &quot;provide | inject提供和注入&quot;">​</a></h3><ul><li>祖先提供东西，后代注入东西</li><li>作用是大范围、隔N代共享信息</li></ul>`,42),t=[s];function n(r,d,c,p,h,u){return a(),i("div",null,t)}const v=e(o,[["render",n]]);export{x as __pageData,v as default};
