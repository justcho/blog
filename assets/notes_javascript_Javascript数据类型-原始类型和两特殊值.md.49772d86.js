import{_ as l,o as a,c as i,U as e}from"./chunks/framework.316ef557.js";const f=JSON.parse('{"title":"原始类型和两特殊值","description":"","frontmatter":{},"headers":[],"relativePath":"notes/javascript/Javascript数据类型-原始类型和两特殊值.md","filePath":"notes/javascript/Javascript数据类型-原始类型和两特殊值.md","lastUpdated":1690796691000}'),n={name:"notes/javascript/Javascript数据类型-原始类型和两特殊值.md"},o=e(`<h1 id="原始类型和两特殊值" tabindex="-1">原始类型和两特殊值 <a class="header-anchor" href="#原始类型和两特殊值" aria-label="Permalink to &quot;原始类型和两特殊值&quot;">​</a></h1><h2 id="一、js的数据类型" tabindex="-1">一、JS的数据类型 <a class="header-anchor" href="#一、js的数据类型" aria-label="Permalink to &quot;一、JS的数据类型&quot;">​</a></h2><ol><li>数值（number）：整数和小数（比如1和3.14）</li><li>字符串（string）：文本（比如Hello World）。</li><li>布尔值（boolean）：表示真伪的两个特殊值，即true（真）和false（假）</li><li>undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li><li>null：表示空值，即此处的值为空。</li></ol><h2 id="二、数值-number" tabindex="-1">二、数值（number） <a class="header-anchor" href="#二、数值-number" aria-label="Permalink to &quot;二、数值（number）&quot;">​</a></h2><h3 id="一-数值的储存方式-浮点数" tabindex="-1">（一）数值的储存方式：浮点数 <a class="header-anchor" href="#一-数值的储存方式-浮点数" aria-label="Permalink to &quot;（一）数值的储存方式：浮点数&quot;">​</a></h3><h4 id="_1-javascript-内部-所有数字都会变成二进制之后以64位浮点数形式储存" tabindex="-1">1. JavaScript 内部，所有数字都会变成二进制之后以64位浮点数形式储存 <a class="header-anchor" href="#_1-javascript-内部-所有数字都会变成二进制之后以64位浮点数形式储存" aria-label="Permalink to &quot;1. JavaScript 内部，所有数字都会变成二进制之后以64位浮点数形式储存&quot;">​</a></h4><h4 id="_2-规则模板" tabindex="-1">2. 规则模板 <a class="header-anchor" href="#_2-规则模板" aria-label="Permalink to &quot;2. 规则模板&quot;">​</a></h4><ul><li>正负号：占一位，正数用0，负数用1</li><li>指数部分：占11位（2^11=1024到-1023）</li><li>有效数字：去掉开头的1.（因为大家都有），去掉最后面的0，总共占52位。</li></ul><h4 id="_3-浮点数的范围" tabindex="-1">3. 浮点数的范围 <a class="header-anchor" href="#_3-浮点数的范围" aria-label="Permalink to &quot;3. 浮点数的范围&quot;">​</a></h4><p>（1）最大值</p><ul><li>把指数部分11位和有效数字的52位全设为1,可得最大的二进制数字</li><li>换成十进制为 <code>Number.MAX_VALUE</code>: 1.7976931348623157e+308</li></ul><p>（2）最小值</p><ul><li>指数负方向拉满、有效数字最小1，得到最小的二进制数字</li><li>换成十进制为<code>Number.MIN_VALUE</code>: 5e-324</li></ul><h4 id="_4-精度" tabindex="-1">4. 精度 <a class="header-anchor" href="#_4-精度" aria-label="Permalink to &quot;4. 精度&quot;">​</a></h4><ul><li>最多只能到52+1个二进制位表示有效数字</li><li>2^53对应的十进制是9后面15个零</li><li>所以对于十进制来说15位数字都能精确表示</li><li>16位有效数字如果小于90开头，也能精确表示</li><li>91 10000000000001就存不下来</li></ul><h3 id="二-数值的表示法" tabindex="-1">（二）数值的表示法 <a class="header-anchor" href="#二-数值的表示法" aria-label="Permalink to &quot;（二）数值的表示法&quot;">​</a></h3><ol><li>整数</li><li>小数</li><li>科学计数法</li></ol><ul><li>小数点前的数字多于21位，JS会自动将数值转为科学计数法表示</li><li>小数点后的零多于5个，JS会自动将数值转为科学计数法表示</li></ul><h3 id="三-数值的进制" tabindex="-1">（三）数值的进制 <a class="header-anchor" href="#三-数值的进制" aria-label="Permalink to &quot;（三）数值的进制&quot;">​</a></h3><p>JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制。</p><ul><li>十进制：没有前导0的数值。</li><li>八进制：有前缀0o或0O的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。如0123或00123或0o123</li><li>十六进制：有前缀0x或0X的数值。如0x3F或0X3F</li><li>二进制：有前缀0b或0B的数值。如0b11或0B11</li></ul><h3 id="四-特殊数值" tabindex="-1">（四）特殊数值 <a class="header-anchor" href="#四-特殊数值" aria-label="Permalink to &quot;（四）特殊数值&quot;">​</a></h3><h4 id="_1、正零和负零" tabindex="-1">1、正零和负零 <a class="header-anchor" href="#_1、正零和负零" aria-label="Permalink to &quot;1、正零和负零&quot;">​</a></h4><ul><li><p>几乎所有场合，正零和负零都会被当作正常的0。</p></li><li><p>唯一有区别的场合是，+0或-0当作分母，返回的值是不相等的。</p></li></ul><h4 id="_2、nan" tabindex="-1">2、NaN <a class="header-anchor" href="#_2、nan" aria-label="Permalink to &quot;2、NaN&quot;">​</a></h4><p>（1）含义 NaN是 JavaScript 的特殊值，表示“非数字”（Not a Number） （2）运算规则</p><ul><li><p>NaN不等于任何值，包括它本身。</p></li><li><p>数组的indexOf方法内部使用的是严格相等运算符，所以该方法对NaN不成立。</p></li><li><p>NaN在布尔运算时被当作false。</p></li><li><p>NaN与任何数（包括它自己）的运算，得到的都是NaN。</p></li></ul><h4 id="_3-infinity" tabindex="-1">3.Infinity <a class="header-anchor" href="#_3-infinity" aria-label="Permalink to &quot;3.Infinity&quot;">​</a></h4><p>（1）含义 ：Infinity表示“无穷”，用来表示两种场景。</p><ul><li>一种是一个正的数值太大，或一个负的数值太小，无法表示</li><li>另一种是非0数值除以0，得到Infinity。</li></ul><p>（2）Infinity有正负之分，Infinity表示正的无穷，-Infinity表示负的无穷。 （3）Infinity大于一切数值（除了NaN），-Infinity小于一切数值（除了NaN）。 （4）Infinity与NaN比较，总是返回false。 （5）运算规则：</p><ul><li>Infinity的四则运算，符合无穷的数学计算规则。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">5 * Infinity // Infinity</span></span>
<span class="line"><span style="color:#A6ACCD;">5 - Infinity // -Infinity</span></span>
<span class="line"><span style="color:#A6ACCD;">Infinity / 5 // Infinity</span></span>
<span class="line"><span style="color:#A6ACCD;">5 / Infinity // 0</span></span></code></pre></div><ul><li>0乘以Infinity，返回NaN；0除以Infinity，返回0；Infinity除以0，返回Infinity。</li><li>Infinity加上或乘以Infinity，返回的还是Infinity。</li><li>Infinity减去或除以Infinity，得到NaN。</li><li>Infinity与null计算时，null会转成0，等同于与0的计算。</li><li>Infinity与undefined计算，返回的都是NaN。</li></ul><h2 id="三、字符串string" tabindex="-1">三、字符串string <a class="header-anchor" href="#三、字符串string" aria-label="Permalink to &quot;三、字符串string&quot;">​</a></h2><h3 id="_1、每个字符两个字节" tabindex="-1">1、每个字符两个字节 <a class="header-anchor" href="#_1、每个字符两个字节" aria-label="Permalink to &quot;1、每个字符两个字节&quot;">​</a></h3><h3 id="_2、写法" tabindex="-1">2、写法 <a class="header-anchor" href="#_2、写法" aria-label="Permalink to &quot;2、写法&quot;">​</a></h3><ul><li>单引号：如<code>&#39;你好&#39;</code></li><li>双引号：如<code>&quot;你好&quot;</code></li><li>反引号：如<code>你好</code> ，在反引号中可以直接回车，不用转义</li></ul><p>●注意:引号不属于字符串的一部分，就像书名号不属于书名的部分一样</p><h3 id="_3、转义" tabindex="-1">3、转义 <a class="header-anchor" href="#_3、转义" aria-label="Permalink to &quot;3、转义&quot;">​</a></h3><ul><li><p><code>\\&#39;</code>表示<code>&#39;</code></p></li><li><p><code>\\&quot;</code>表示<code>&quot;</code></p></li><li><p><code>\\n</code>表示换行</p></li><li><p><code>\\r</code>表示回车</p></li><li><p><code>\\t</code>表示tab制表符</p></li><li><p><code>\\ \\</code>表示<code>\\</code></p></li><li><p><code>\\uFFFF</code>表示对应的Unicode字符</p></li><li><p><code>\\xFF</code>表示前256个Unicode字符</p></li></ul><h3 id="_4、字符串的属性" tabindex="-1">4、字符串的属性 <a class="header-anchor" href="#_4、字符串的属性" aria-label="Permalink to &quot;4、字符串的属性&quot;">​</a></h3><p>（1）字符串不该有属性！只有对象才有属性。至于为什么，学完对象再来 （2）字符串的长度<code>string.length</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&#39;123&#39; . length // 3</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;\\n\\r\\t&#39; .length // 3</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;&#39;.length // 0 空字符串</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39; &#39;.length // 1 里面有个空格，不是空字符串</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>（3）通过下标读取字符<code>string[index]</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let S = &#39;hello&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">s[0] // &quot;h&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><p>注意index从0开始,s[0]是第一个字符,最后一个字符应该是length-1</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let s = &#39;hello&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">s[5] // undefined,居然不报错</span></span>
<span class="line"><span style="color:#A6ACCD;">s[4]// &#39;o&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">复制代码</span></span></code></pre></div><h3 id="_5、base64转码" tabindex="-1">5、base64转码 <a class="header-anchor" href="#_5、base64转码" aria-label="Permalink to &quot;5、base64转码&quot;">​</a></h3><ul><li><code>window.btoa</code>正常字符串转为Base64编码的字符串</li><li><code>window.atob</code>Base64编码的字符串转为原来的字符串</li><li>一般用来隐藏招聘启事里的简历,比如邮箱:MjYzODE0MzcxNUBxcS5jb20=</li><li>不可用来「加密」，也就能骗过一部分外行，内行一转码就出来了！</li></ul><h2 id="四、布尔值boolean" tabindex="-1">四、布尔值boolean <a class="header-anchor" href="#四、布尔值boolean" aria-label="Permalink to &quot;四、布尔值boolean&quot;">​</a></h2><ol><li><p>布尔值代表“真”和“假”两个状态。“真”用关键字true表示，“假”用关键字false表示。布尔值只有这两个值。</p></li><li><p>下列运算符会返回布尔值：</p></li></ol><ul><li>前置逻辑运算符： <code>! (Not)</code></li><li>相等运算符：<code>===</code>，<code>!==</code>，<code>==</code>，<code>!=</code></li><li>比较运算符：<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code></li></ul><ol start="3"><li>如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为false，其他值都视为true。</li></ol><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>false</code></li><li><code>0</code></li><li><code>NaN</code></li><li><code>&quot;&quot;</code>或<code>&#39;&#39;</code>（空字符串）</li></ul><h2 id="五、null与undefined" tabindex="-1">五、null与undefined <a class="header-anchor" href="#五、null与undefined" aria-label="Permalink to &quot;五、null与undefined&quot;">​</a></h2><ol><li>null与undefined都可以表示“没有”，没有本质区别</li><li>细节一：如果一个变量声明了,但没有赋值，那么默认值就是undefined,而不是 null</li><li>细节二：如果一个函数，没有写return,那么默认return undefined,而不是null</li><li>细节三：前端程序员习惯上，把非对象的空值写为undefined,把对象的空值写为null，但仅仅是习惯上而已</li></ol><h2 id="六、类型转换" tabindex="-1">六、类型转换 <a class="header-anchor" href="#六、类型转换" aria-label="Permalink to &quot;六、类型转换&quot;">​</a></h2><h3 id="_1、number-string" tabindex="-1">1、number =&gt; string <a class="header-anchor" href="#_1、number-string" aria-label="Permalink to &quot;1、number =&gt; string&quot;">​</a></h3><ul><li><code>String(n)</code></li><li><code>n+&#39;&#39;</code></li><li><code>&#39;&#39;+n</code></li></ul><h3 id="_2、string-number" tabindex="-1">2、string =&gt; number <a class="header-anchor" href="#_2、string-number" aria-label="Permalink to &quot;2、string =&gt; number&quot;">​</a></h3><ul><li><code>Number(s)</code></li><li><code>parseInt(s)</code></li><li><code>parseFloat(s)</code></li><li><code>s-0</code></li><li><code>+s</code></li></ul><h3 id="_3、x-bool" tabindex="-1">3、x =&gt; bool <a class="header-anchor" href="#_3、x-bool" aria-label="Permalink to &quot;3、x =&gt; bool&quot;">​</a></h3><ul><li><code>Boolean(x)</code></li><li><code>!!x</code>一个感叹号可把任何东西取反布尔值，再来一个就是反布尔值的反布尔值，也就是原始布尔值</li></ul><h3 id="_4、x-string" tabindex="-1">4、X =&gt; string <a class="header-anchor" href="#_4、x-string" aria-label="Permalink to &quot;4、X =&gt; string&quot;">​</a></h3><ul><li><code>String(x)</code></li><li><code>x.toString()</code></li><li>数字1不可用上面的,因为默认1.后面应是小数。bug！</li><li><code>(1).toString()</code></li><li><code>1..toString()</code></li><li><code>1 .toString()</code></li></ul>`,66),t=[o];function s(c,r,d,p,u,h){return a(),i("div",null,t)}const _=l(n,[["render",s]]);export{f as __pageData,_ as default};
