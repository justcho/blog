import{_ as s,o as a,c as n,U as l}from"./chunks/framework.316ef557.js";const e="/blog/assets/class-img.9de06686.png",C=JSON.parse('{"title":"React Class组件详解","description":"","frontmatter":{},"headers":[],"relativePath":"notes/react/Class组件.md","filePath":"notes/react/Class组件.md","lastUpdated":1689776313000}'),o={name:"notes/react/Class组件.md"},t=l(`<h1 id="react-class组件详解" tabindex="-1">React Class组件详解 <a class="header-anchor" href="#react-class组件详解" aria-label="Permalink to &quot;React Class组件详解&quot;">​</a></h1><h2 id="两种方式创建class组件" tabindex="-1">两种方式创建Class组件 <a class="header-anchor" href="#两种方式创建class组件" aria-label="Permalink to &quot;两种方式创建Class组件&quot;">​</a></h2><h3 id="es5方式-过时仅作了解" tabindex="-1">ES5方式（过时仅作了解） <a class="header-anchor" href="#es5方式-过时仅作了解" aria-label="Permalink to &quot;ES5方式（过时仅作了解）&quot;">​</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createClass</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hi</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> A</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//由于ES5不支持class 所以才有这种方式</span></span></code></pre></div><h3 id="es6方式-主要用这个" tabindex="-1">ES6方式（主要用这个） <a class="header-anchor" href="#es6方式-主要用这个" aria-label="Permalink to &quot;ES6方式（主要用这个）&quot;">​</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">peops</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hi</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// extends constructor super 强行记忆</span></span></code></pre></div><h2 id="props-外部数据" tabindex="-1">Props 外部数据 <a class="header-anchor" href="#props-外部数据" aria-label="Permalink to &quot;Props 外部数据&quot;">​</a></h2><h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 不初始化可以省略 constructor ；如果需要初始化的话就必须写全套</span></span></code></pre></div><h3 id="效果" tabindex="-1">效果 <a class="header-anchor" href="#效果" aria-label="Permalink to &quot;效果&quot;">​</a></h3><ul><li>这么做了之后， <code>this.props</code> 就是外部数据对象的地址了</li></ul><h3 id="读" tabindex="-1">读 <a class="header-anchor" href="#读" aria-label="Permalink to &quot;读&quot;">​</a></h3><ul><li>通过 <code>this.props.xxx</code>  来读</li></ul><h3 id="写" tabindex="-1">写 <a class="header-anchor" href="#写" aria-label="Permalink to &quot;写&quot;">​</a></h3><ul><li>外部数据应该由外部数据来更新</li></ul><h3 id="相关钩子-已经被弃用了-不要用-了解" tabindex="-1">相关钩子(已经被弃用了，不要用 ，了解） <a class="header-anchor" href="#相关钩子-已经被弃用了-不要用-了解" aria-label="Permalink to &quot;相关钩子(已经被弃用了，不要用 ，了解）&quot;">​</a></h3><ul><li>componentWillReceiveProps</li><li>当组件接受新的props时会触发此钩子</li><li>更名为 UNSAFE_componentWillReceiveProps</li></ul><h3 id="props的作用" tabindex="-1">Props的作用 <a class="header-anchor" href="#props的作用" aria-label="Permalink to &quot;Props的作用&quot;">​</a></h3><p>接受外部数据：只能读不能写；外部数据由父组件传递 接受外部函数：在恰当的时机，调用该函数；该函数一般是父组件的函数</p><h2 id="state-setstate-内部数据" tabindex="-1">State &amp; setState 内部数据 <a class="header-anchor" href="#state-setstate-内部数据" aria-label="Permalink to &quot;State &amp; setState 内部数据&quot;">​</a></h2><h3 id="初始化-state" tabindex="-1">初始化 State <a class="header-anchor" href="#初始化-state" aria-label="Permalink to &quot;初始化 State&quot;">​</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Compoment</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//初始化</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#F07178;">        user</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">just</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">(){</span><span style="color:#676E95;font-style:italic;">/*...*/</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="读写-state" tabindex="-1">读写 State <a class="header-anchor" href="#读写-state" aria-label="Permalink to &quot;读写 State&quot;">​</a></h3><h4 id="读用-this-state" tabindex="-1">读用 <code>this.state</code> <a class="header-anchor" href="#读用-this-state" aria-label="Permalink to &quot;读用 \`this.state\`&quot;">​</a></h4><p><code>this.state.xxx.yyy</code></p><p><strong>写用</strong><code>**this.setState(???,fn)**</code>**** <code>this.setState(newState,fn)</code> 注意：setState 不会立刻改变 this.state， 会在当前代码运行完后再更新this.state 从而触发UI更新 函数形式：<code>this.setState((state,props)=&gt;newState,fn)</code> 这种方式的 state 更易于理解 fn是成功的回调，在写入成功后执行。（用的比较少）</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//this.setState(newState,fn)</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//this.setState((state,props)=&gt;newState,fn)</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span></span></code></pre></div><h4 id="写时会-shallow-mergfe" tabindex="-1">写时会 shallow mergfe <a class="header-anchor" href="#写时会-shallow-mergfe" aria-label="Permalink to &quot;写时会 shallow mergfe&quot;">​</a></h4><p>自动合并 setState 会自动将新 state 与旧 state 进行一级合并，可以用 <code>...this.state</code> 全部合并</p><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><h3 id="函数列表" tabindex="-1">函数列表 <a class="header-anchor" href="#函数列表" aria-label="Permalink to &quot;函数列表&quot;">​</a></h3><ul><li>constructor() - 在这里初始化 state</li><li>shouldComponentUpdate() - return false 阻止更新</li><li>render() - 创建虚拟 DOM</li><li>componentDidMount() - 组件已出现在页面</li><li>componentDidUpdate() - 组件已更新</li><li>componentWillUnmount() - 组件将死</li></ul><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><h4 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h4><ul><li>初始化 props</li><li>初始化state， 但此时不能调用 setState</li><li>用来写 bind this</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">constructor</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/*其他代码忽略*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">onClick</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">onClick</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//可以用新语法代替  注意下面这个是写在外面的</span></span>
<span class="line"><span style="color:#82AAFF;">onClick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#82AAFF;">constructor</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/*...*/</span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>constructor 如果只初始化 props可不写 如果要初始化 state 就必须写全</p><h3 id="shouldcomponentupdate" tabindex="-1">shouldComponentUpdate <a class="header-anchor" href="#shouldcomponentupdate" aria-label="Permalink to &quot;shouldComponentUpdate&quot;">​</a></h3><h4 id="用途-1" tabindex="-1">用途 <a class="header-anchor" href="#用途-1" aria-label="Permalink to &quot;用途&quot;">​</a></h4><p>返回 true 表示不阻止 UI 更新 返回 false 表示阻止 UI 更新</p><h3 id="启发" tabindex="-1">启发 <a class="header-anchor" href="#启发" aria-label="Permalink to &quot;启发&quot;">​</a></h3><p>其实可以将 newState 和 this.state 的每个属性都对比一下 如果全都相等，就不更新 如果有一个不等，就更新（对比的时候只对比一层 ，浅对比） React 内置了这个功能 叫做 <code>React.PureComponent</code> 可以代替 <code>React.Component</code></p><h3 id="render" tabindex="-1">render <a class="header-anchor" href="#render" aria-label="Permalink to &quot;render&quot;">​</a></h3><h4 id="用途-2" tabindex="-1">用途 <a class="header-anchor" href="#用途-2" aria-label="Permalink to &quot;用途&quot;">​</a></h4><ul><li>展示视图</li></ul><p><code>return (&lt;div&gt;...&lt;/div&gt;)</code></p><ul><li>只能有一个根元素</li><li>如果有两个根元素，就要用&lt;React.Fragment&gt;包起来</li><li>&lt;React.Fragment/&gt; 可以缩写成 &lt;&gt;&lt;/&gt;</li></ul><h4 id="技巧" tabindex="-1">技巧 <a class="header-anchor" href="#技巧" aria-label="Permalink to &quot;技巧&quot;">​</a></h4><ul><li>render 里面可以写 <code>if...else</code></li><li>render 里面可以写 ?: 表达式</li><li>render 里面不能直接写 for 循环，需要用数组</li><li>render 里面可以写 <code>array.map</code> (循环）</li></ul><h3 id="componentdidmount" tabindex="-1">componentDidMount() <a class="header-anchor" href="#componentdidmount" aria-label="Permalink to &quot;componentDidMount()&quot;">​</a></h3><h4 id="用途-3" tabindex="-1">用途 <a class="header-anchor" href="#用途-3" aria-label="Permalink to &quot;用途&quot;">​</a></h4><ul><li>在元素插入页面后执行代码，这代码依赖DOM(在元素出现后才能执行的操作)</li><li>比如你想获取 div 的高度，就最好在这里写</li><li>此处可以发起加载数据的 AJAX 请求（官方推荐）</li><li>首次渲染会执行此钩子</li></ul><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><p>看文档</p><h3 id="componentdidupdate" tabindex="-1">componentDidUpdate() <a class="header-anchor" href="#componentdidupdate" aria-label="Permalink to &quot;componentDidUpdate()&quot;">​</a></h3><h4 id="用途-4" tabindex="-1">用途 <a class="header-anchor" href="#用途-4" aria-label="Permalink to &quot;用途&quot;">​</a></h4><ul><li>在视图更新后执行代码</li><li>此处也可以发起AJAX请求， 用于更新数据（看文档）</li><li>首次渲染不会执行此钩子</li><li>在此处 setState 可能会引起无限循环，除非放在 if 里（因为变了所以会不停的更新）</li><li>若 shouldCom..Update返回 false, 则不触发此钩子</li></ul><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h4><p>看文档</p><h3 id="componentwillunmount" tabindex="-1">componentWillUnmount <a class="header-anchor" href="#componentwillunmount" aria-label="Permalink to &quot;componentWillUnmount&quot;">​</a></h3><h4 id="用途-5" tabindex="-1">用途 <a class="header-anchor" href="#用途-5" aria-label="Permalink to &quot;用途&quot;">​</a></h4><p>组件将要被移出页面然后被销毁时执行代码 unmount 过的组件不会再次 mount</p><h4 id="举例" tabindex="-1">举例 <a class="header-anchor" href="#举例" aria-label="Permalink to &quot;举例&quot;">​</a></h4><p>你在 c..DidMount 里面创建 就要在 c..WillUnmount里面取消 原则：谁污染谁治理</p><h3 id="分阶段看钩子执行顺序" tabindex="-1">分阶段看钩子执行顺序 <a class="header-anchor" href="#分阶段看钩子执行顺序" aria-label="Permalink to &quot;分阶段看钩子执行顺序&quot;">​</a></h3><p><img src="`+e+'" alt="image.png"></p><h2 id="react-purecomponent" tabindex="-1">React.PureComponent <a class="header-anchor" href="#react-purecomponent" aria-label="Permalink to &quot;React.PureComponent&quot;">​</a></h2><p>PureComponent 会在 render 之前对比新 state 和旧 state 的每一个 key，以及新 props 和旧 props 的每一个 key。 如果所有 key 的值全都一样，就不会 render；如果有任何一个 key 的值不同，就会 render。</p>',68),p=[t];function r(c,i,y,F,D,d){return a(),n("div",null,p)}const u=s(o,[["render",r]]);export{C as __pageData,u as default};
