import{_ as s,o as a,c as n,U as l}from"./chunks/framework.316ef557.js";const A=JSON.parse('{"title":"Computed & Watch","description":"","frontmatter":{},"headers":[],"relativePath":"notes/vue/computed&watch.md","filePath":"notes/vue/computed&watch.md","lastUpdated":1689776313000}'),p={name:"notes/vue/computed&watch.md"},o=l(`<h1 id="computed-watch" tabindex="-1">Computed &amp; Watch <a class="header-anchor" href="#computed-watch" aria-label="Permalink to &quot;Computed &amp; Watch&quot;">​</a></h1><h2 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed&quot;">​</a></h2><p>定义：根据其他属性被计算出来的值</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">computed ：</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">: </span><span style="color:#A6ACCD;">string</span><span style="color:#F07178;">]: </span><span style="color:#A6ACCD;">Function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">get</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>是个对象，键名是字符串，键值可以是 <br> ①仅读取：函数形式，返回计算出的值（也就是getter） <br> ②读取和设置：对象形式，<code>getter</code>返回计算出来的值，<code>setter</code>修改</p><p>计算属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。注意，如果某个依赖 (比如非响应式属性) 在该实例范畴之外，则计算属性是不会被更新的。 如果依赖的属性没有变化，就不会重新计算 但是<code>getter / setter</code>默认不会做缓存，Vue做了特殊处理</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> vm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 仅读取</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">aDouble</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 读取和设置</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">aPlus</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">aPlus   </span><span style="color:#676E95;font-style:italic;">// =&gt; 2</span></span>
<span class="line"><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">aPlus </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a       </span><span style="color:#676E95;font-style:italic;">// =&gt; 2</span></span>
<span class="line"><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">aDouble </span><span style="color:#676E95;font-style:italic;">// =&gt; 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//在template里，当数据来用，默认为返回值</span></span>
<span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;">aPlus</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;">aDouble</span><span style="color:#89DDFF;">}}</span></span></code></pre></div><h2 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch&quot;">​</a></h2><p>定义：当数据变化时执行一个函数</p><p>异步，所有代码执行完才会执行 何为变化？简单类型看值，复杂类型(对象) 看地址 这其实就是===的规则（<a href="https://codesandbox.io/s/still-snowflake-m62t1" target="_blank" rel="noreferrer">示例代码</a>）</p><ul><li>obj原本是{a:&#39;a&#39;},现在<code>obj = {a:&#39;a&#39;}</code>,那么obj变了，obj里的a也变了。因为obj储存了一个对象的地址，现在重新存了一个对象的地址。当然变了</li><li>obj原本是{a:&#39;a&#39;},现在obj.a = &#39;b&#39;，那么obj.a变了（简单类型，而且值变了），obj没有变（复杂类型，保存的地址没变），obj存的那个对象还是那个对象。</li><li><code>n：0</code>， 现在<code>n = 1</code>,那么<code>n</code>变了（简单类型，而且值变了）</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">watch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">: </span><span style="color:#A6ACCD;">string</span><span style="color:#F07178;">]: </span><span style="color:#A6ACCD;">string</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Array</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//在new Vue的options里</span></span>
<span class="line"><span style="color:#FFCB6B;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">o1</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> ()</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">， </span><span style="color:#676E95;font-style:italic;">//别用这种，这里的this是全局对象，因为箭头函数没有this，那就回去他外面的函数找this，但是new Vue不是他外面的函数，外面的函数是指外面定义的函数。所以该箭头函数外面没有函数，所以this指的就是window或者global</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">o2</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">oldValue</span><span style="color:#89DDFF;">){},</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">//vue规定了，参数是一个新值和一个旧值 这两个值是vue传进来的</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">o3</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">o4</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">f1</span><span style="color:#89DDFF;">,{</span><span style="color:#A6ACCD;">o6的值</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">//其他写法的结合</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">o5</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">methodName</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">o6</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">handler</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">methodName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">deep</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">immediate</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//handler里写要执行的函数</span></span>
<span class="line"><span style="color:#89DDFF;">                                                             </span><span style="color:#676E95;font-style:italic;">//deep表示要不要深入的侦听这个对象，true深入的话该对象里面的属性变化也算变化</span></span>
<span class="line"><span style="color:#89DDFF;">                                                             </span><span style="color:#676E95;font-style:italic;">//immediate表示第一次渲染时要不要执行函数。全都默认false。</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object.a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> : </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">){</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">//对这个对象里面的属性a侦听</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">*********************************************************************</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//或者在new Vue外面这样写</span></span>
<span class="line"><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">,{</span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  ;immetiate:  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//如果非要把这样新式的放到new Vue的options里，那就挂在生命周期钩子里</span></span>
<span class="line"><span style="color:#82AAFF;">created</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">,{</span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">  ;</span><span style="color:#A6ACCD;">immetiate</span><span style="color:#F07178;">:  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="computed和watch的区别" tabindex="-1">computed和watch的区别 <a class="header-anchor" href="#computed和watch的区别" aria-label="Permalink to &quot;computed和watch的区别&quot;">​</a></h2><p><code>computed</code>是计算属性 <br></p><p>computed是依赖其他属性计算出一个值的，这个值在调用时不需要加括号，可以当一个属性用；根据依赖自动缓存，依赖不变这个值就不会重新计算 <br></p><p><code>watch</code>是监听, watch有两个选项:</p><ul><li><code>immediate</code>表示是否在第一次渲染时执行这个函数</li><li><code>deep</code>监听一个对象是否要监听这个对象里面的属性的变化, <code>watch</code>某个属性变化了就执行一个函数</li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>如果一个数据依赖于其他数据，那么把这个数据设计为computed的 如果你需要在某个数据变化时做一些事情， 使用watch来观察这个数据变化</p>`,20),e=[o];function t(c,r,F,y,D,i){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
