import{_ as a,o as s,c as o,U as l}from"./chunks/framework.316ef557.js";const C=JSON.parse('{"title":"Object","description":"","frontmatter":{},"headers":[],"relativePath":"notes/javascript/Javascript数据类型-Object.md","filePath":"notes/javascript/Javascript数据类型-Object.md","lastUpdated":1690796691000}'),n={name:"notes/javascript/Javascript数据类型-Object.md"},e=l(`<h1 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h1><h2 id="一、定义" tabindex="-1">一、定义 <a class="header-anchor" href="#一、定义" aria-label="Permalink to &quot;一、定义&quot;">​</a></h2><p>对象就是一组“键值对”（key-value）的集合, 是一种无序的复合数据集合。</p><h2 id="二、写法" tabindex="-1">二、写法 <a class="header-anchor" href="#二、写法" aria-label="Permalink to &quot;二、写法&quot;">​</a></h2><ol><li>正规写法：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> 对象名 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> 0</span><span style="color:#82AAFF;">bject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">just</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ol start="2"><li>简便写法：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> 对象名 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">just</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="3"><li>匿名写法：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">just</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>细节</p><ul><li>键名是<strong>字符串</strong>！</li><li>加了引号的键名可以包含任意字符，比如空格、以数字开头</li><li>没加引号的键名按照标识符规则写。标识符是不能用数字开头的</li><li><strong>就算引号省略了，键名也还是字符串</strong></li></ul><h2 id="三、对象的属性" tabindex="-1">三、对象的属性 <a class="header-anchor" href="#三、对象的属性" aria-label="Permalink to &quot;三、对象的属性&quot;">​</a></h2><h3 id="_1、属性名-每个key都是对象的属性名-property" tabindex="-1">1、属性名：每个key都是对象的属性名（property） <a class="header-anchor" href="#_1、属性名-每个key都是对象的属性名-property" aria-label="Permalink to &quot;1、属性名：每个key都是对象的属性名（property）&quot;">​</a></h3><ul><li>所有属性名都会自动变成字符串！</li><li>加了引号的已经是字符串了，就不会改变了</li><li>没加引号的会把你变成字符串</li><li>比如一个十六进制数0xFF做键名，还没加引号，就会自动变成255，并且加上引号</li><li><code>Object.keys(obj)</code>可以打印出obj这个对象的键名也就是属性名!</li><li>如果想用一个变量的值做属性名</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1111</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面代码中对象obj里的属性名是一个字符串a，就算不写引号还是字符串a啊，和前面声明的变量a无任何关系。</p><p>但是如果想用a变量的值做属性名，那键名应写成<code>[a]</code>即可. 而且a变量的值不是字符串，也会自动变成字符串</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1111</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这其实是下列代码的合写形式</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">obj[a] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1111</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><ul><li>超纲知识：除了字符串， symbol也能做属性名,在学习「迭代」时会用到。其实压根不用</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let a = Symbol()</span></span>
<span class="line"><span style="color:#A6ACCD;">let obj = { [a]: &#39;Hello&#39; }</span></span></code></pre></div><h3 id="_2、属性值" tabindex="-1">2、属性值 <a class="header-anchor" href="#_2、属性值" aria-label="Permalink to &quot;2、属性值&quot;">​</a></h3><p>每个value都是对象的属性值</p><h3 id="_3、对象的隐藏属性" tabindex="-1">3、对象的隐藏属性 <a class="header-anchor" href="#_3、对象的隐藏属性" aria-label="Permalink to &quot;3、对象的隐藏属性&quot;">​</a></h3><ul><li>JS中每个对象都有一个隐藏属性<code>_ _proto_ _</code></li><li>这个隐藏属性储存着其共有属性组成的对象的地址</li><li>这个由共有属性组成的对象<code>window.Object.prototype</code>叫做原型，也称为对象的根</li><li>也就是说，每个object对象的隐藏属性<code>_ _proto_ _</code>储存着原型<code>window.Object.prototype</code>的地址</li><li>每个对象都有原型</li><li>原型也是个对象，所以也有原型，这不过原型的原型为null（空，但是是存在的）</li></ul><p>代码示例</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//居然不报错</span></span></code></pre></div><p>因为obj的隐藏属性对应的对象上有toString()</p><h2 id="四、对象属性的增删改查" tabindex="-1">四、对象属性的增删改查 <a class="header-anchor" href="#四、对象属性的增删改查" aria-label="Permalink to &quot;四、对象属性的增删改查&quot;">​</a></h2><h3 id="一-删除属性" tabindex="-1">（一）删除属性 <a class="header-anchor" href="#一-删除属性" aria-label="Permalink to &quot;（一）删除属性&quot;">​</a></h3><ol><li><p><code>delete obj.xxx</code>或<code>delete obj[&#39;xxx&#39;]</code>：即可删除obj的XXX属性，此时属性值当然也没有了</p></li><li><p>注意比较区别：<code>obj.xxx = undifined</code>xxx属性名还在，只是属性值变为undifined空</p></li><li><p>举例</p></li></ol><ul><li>例1</li></ul><p>注：只能用<code>&#39;xxx&#39; in obj</code> <strong>查看属性名</strong>是否还在对象中：true表示在，false表示不在</p><ul><li>例2</li></ul><p>注： ①语句<code>&#39;xxx&#39; in obj &amp;&amp; obj.xxx === undefined</code>返回true，表示属性xxx还在obj中，而且<strong>属性xxx的值</strong>是undefined ②注意<code>obj.xxx === undefined</code>不能断定&#39;xxx&#39; 是否为obj的属性。证明如下</p><p>③只能用<code>&#39;xxx&#39; in obj</code> <strong>查看属性名</strong>是否还在对象中：true表示在，false表示不在</p><h3 id="二-读属性" tabindex="-1">（二）读属性 <a class="header-anchor" href="#二-读属性" aria-label="Permalink to &quot;（二）读属性&quot;">​</a></h3><h4 id="_1、查看一个对象的所有属性" tabindex="-1">1、查看一个对象的所有属性 <a class="header-anchor" href="#_1、查看一个对象的所有属性" aria-label="Permalink to &quot;1、查看一个对象的所有属性&quot;">​</a></h4><ol><li><p>查看一个对象的所有自身属性: <code>Object.keys(obj)</code></p></li><li><p>查看一个对象的所有自身属性值： <code>Object.values(obj)</code></p></li><li><p>查看一个对象的所有自身的属性和值：直接对象名就行<code>obj</code>或者<code>Object.entries(obj)</code></p></li><li><p>查看自身+共有属性: <code>console.dir(obj)</code></p></li><li><p>查看共有属性: 自己依次用<code>Object.keys</code>打印出<code>obj.__ proto_</code></p></li><li><p>判断一个属性是自身的还是共有的: <code>obj.hasOwnProperty(&#39;属性名&#39;)</code></p></li></ol><p>返回true说明该属性是自身属性，返回false说明该属性是共有属性</p><ol start="7"><li><code>&#39;key&#39; in obj</code>查看属性名是否还在对象中：true表示在，false表示不在</li></ol><h4 id="_2、查看一个对象的一个属性" tabindex="-1">2、查看一个对象的一个属性 <a class="header-anchor" href="#_2、查看一个对象的一个属性" aria-label="Permalink to &quot;2、查看一个对象的一个属性&quot;">​</a></h4><p>①中括号语法: <code>obj[&#39;key&#39;]</code>或<code>obj[&#39;k&#39;+&#39;ey&#39;]</code> ②点语法: <code>obj.key</code>(与①等价) ③注：<code>obj[key]</code>只能在提前声明key是个变量，我们是想把这个变量的值作为属性名的时候用！！！ ④举例</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1111</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wawa</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">obj[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#A6ACCD;">obj[a]</span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;">obj[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span></code></pre></div><p>⑤练习</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gender</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">gender </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">woman</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">list</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)  </span><span style="color:#676E95;font-style:italic;">//重点</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// 结果为person的第一个属性值yy*3</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gender</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">gender </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">woman</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">list</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">person</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">]) </span><span style="color:#676E95;font-style:italic;">//重点</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 结果为person的所有属性值yy、18、woman</span></span></code></pre></div><h3 id="三-修改或增加属性" tabindex="-1">（三）修改或增加属性 <a class="header-anchor" href="#三-修改或增加属性" aria-label="Permalink to &quot;（三）修改或增加属性&quot;">​</a></h3><h4 id="_1、自身属性" tabindex="-1">1、自身属性 <a class="header-anchor" href="#_1、自身属性" aria-label="Permalink to &quot;1、自身属性&quot;">​</a></h4><h5 id="_1-直接赋值" tabindex="-1">（1）直接赋值 <a class="header-anchor" href="#_1-直接赋值" aria-label="Permalink to &quot;（1）直接赋值&quot;">​</a></h5><p>①<code>let obj = {name:&#39;frank&#39;}</code> ②<code>obj.key = &#39;xxx&#39;</code> ③<code>obj[&#39;key&#39;] =&#39;xxx&#39;</code> ④<code>obj[&#39;k&#39;+&#39;ey&#39;] =&#39;xxx&#39;</code> ⑤<code>let key = &#39;name&#39;; obj[key] = &#39;yy&#39;</code></p><h5 id="_2-批量赋值" tabindex="-1">（2）批量赋值 <a class="header-anchor" href="#_2-批量赋值" aria-label="Permalink to &quot;（2）批量赋值&quot;">​</a></h5><p><code>Object.assign(obj, {age: 18, gender: &#39;man&#39;})</code></p><h4 id="_2、修改或增加共有属性" tabindex="-1">2、修改或增加共有属性 <a class="header-anchor" href="#_2、修改或增加共有属性" aria-label="Permalink to &quot;2、修改或增加共有属性&quot;">​</a></h4><h5 id="_1-一个对象" tabindex="-1">（1）一个对象 <a class="header-anchor" href="#_1-一个对象" aria-label="Permalink to &quot;（1）一个对象&quot;">​</a></h5><ul><li>在一个对象中，它的原型中的共有属性只可用来读，无法修改</li><li>要是在一个对象中修改了共有属性，那么其实这个被修改了的共有属性直接放在obj自身里面，不会存入原型</li><li>例子（<strong>不推荐</strong>）：一个一个共有属性的改!</li><li>例子（<strong>不推荐</strong>）:直接把这个对象里存了原型地址的隐藏属性重新赋值为新原型的地址。<strong>原型链</strong>起来了</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let obj = {name:&#39;frank&#39;}</span></span>
<span class="line"><span style="color:#A6ACCD;">let newproto = {&#39;国籍&#39; ：&#39;中国&#39;} //创建一个新对象，它将成为obj的新原型，当然因为是个对象，它里面还有个隐藏属性__proto__</span></span>
<span class="line"><span style="color:#A6ACCD;">obj.__proto__ = newproto //把新原型赋值给旧原型</span></span></code></pre></div><ul><li>例子:直接以新原型为原型创建一个对象。<strong>推荐，一开始就改好！</strong></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let obj2 = Object.create(newproto) //现在该对象没有啥自身属性，自己继续加呗</span></span></code></pre></div><h5 id="_2-原型" tabindex="-1">（2）原型 <a class="header-anchor" href="#_2-原型" aria-label="Permalink to &quot;（2）原型&quot;">​</a></h5><ul><li>其实我们可以直接修改原型里的属性，不要做！<code>window.Object.prototype.toString= &#39;xxx&#39;</code></li></ul><h2 id="五、对象有很多类" tabindex="-1">五、对象有很多类 <a class="header-anchor" href="#五、对象有很多类" aria-label="Permalink to &quot;五、对象有很多类&quot;">​</a></h2><h3 id="一-第一类-函数-对象" tabindex="-1">（一） 第一类：函数（对象） <a class="header-anchor" href="#一-第一类-函数-对象" aria-label="Permalink to &quot;（一） 第一类：函数（对象）&quot;">​</a></h3><h4 id="_1-函数的定义方式" tabindex="-1">1. 函数的定义方式 <a class="header-anchor" href="#_1-函数的定义方式" aria-label="Permalink to &quot;1. 函数的定义方式&quot;">​</a></h4><h5 id="_1-正规写法-let-f1-new-function-x-y-return-x-y-name-anonymous" tabindex="-1">（1）正规写法：<code>let f1 = new Function(&#39;x&#39;,&#39;y&#39;,&#39;return x+y&#39;)</code>(name:anonymous) <a class="header-anchor" href="#_1-正规写法-let-f1-new-function-x-y-return-x-y-name-anonymous" aria-label="Permalink to &quot;（1）正规写法：\`let f1 = new Function(&#39;x&#39;,&#39;y&#39;,&#39;return x+y&#39;)\`(name:anonymous)&quot;">​</a></h5><p>函数是个对象，对象都是由构造函数构造出来的。所以从上式可以发现任何一个函数都是由“爸爸构造函数”Function函数构造出来的。构造函数这个对象的构造函数是“爸爸构造函数”Function函数</p><h5 id="_2-具名函数-function-add-x-y-return-x-y-name-add" tabindex="-1">（2）具名函数：<code>function add(x,y) {return x+y}</code>（name：add） <a class="header-anchor" href="#_2-具名函数-function-add-x-y-return-x-y-name-add" aria-label="Permalink to &quot;（2）具名函数：\`function add(x,y) {return x+y}\`（name：add）&quot;">​</a></h5><h5 id="_3-匿名函数-let-f1-function-x-y-return-x-y-name-f1" tabindex="-1">（3）匿名函数：<code>let f1 = function(x,y){return x+y}</code>(name:f1) <a class="header-anchor" href="#_3-匿名函数-let-f1-function-x-y-return-x-y-name-f1" aria-label="Permalink to &quot;（3）匿名函数：\`let f1 = function(x,y){return x+y}\`(name:f1)&quot;">​</a></h5><p>把具名函数的函数名去掉就是匿名函数，也叫函数表达式，是等号右边这一部分。因为没有名字，所以必须给这个函数表达式挂在一个名字f1上。</p><h5 id="_4-简便写法-let-f1-x-y-x-y-name-f1" tabindex="-1">（4）简便写法：<code>let f1 = (x,y) =&gt; x+y</code>（name：f1） <a class="header-anchor" href="#_4-简便写法-let-f1-x-y-x-y-name-f1" aria-label="Permalink to &quot;（4）简便写法：\`let f1 = (x,y) =&gt; x+y\`（name：f1）&quot;">​</a></h5><h4 id="_2-爸爸构造函数-function-函数构造出来的函数共分为两种-构造函数和普通函数" tabindex="-1">2. “爸爸构造函数”Function()函数构造出来的函数共分为两种:构造函数和普通函数 <a class="header-anchor" href="#_2-爸爸构造函数-function-函数构造出来的函数共分为两种-构造函数和普通函数" aria-label="Permalink to &quot;2. “爸爸构造函数”Function()函数构造出来的函数共分为两种:构造函数和普通函数&quot;">​</a></h4><h5 id="_1-构造函数" tabindex="-1">（1） 构造函数 <a class="header-anchor" href="#_1-构造函数" aria-label="Permalink to &quot;（1） 构造函数&quot;">​</a></h5><p>①是指可以创建出一个对象的函数。 ②比如Function()函数就是一个构造函数，他用于构造任何函数（函数也是对象呀）。我把它称为“爸爸构造函数” ③“爸爸构造函数”Function()函数又构造出了其他构造函数 ④ 比如<code>let Array = new Function(........)</code></p><ul><li>这是用于构造数组对象的Array()函数</li></ul><p>⑤比如<code>let Object = new Function(........)</code></p><ul><li>用于构造普通对象的Object()函数</li></ul><p>⑥比如<code>let Square = new Function(&#39;width&#39;,&#39;return this.width=width&#39;)</code>或者<code>function Square(width){this.width=width}</code></p><ul><li>我们在例子中写的用于构造方块对象的Square()函数</li></ul><p>⑦构造函数构造出来的对象，首字母要小写。比如一个数组对象<code>array1</code> = new Array(1,2,3)，比如一个普通对象<code>obj1</code> = new Object(),比如一个方块对象<code>square1</code> = new Square()</p><h5 id="_2-普通函数" tabindex="-1">（2） 普通函数 <a class="header-anchor" href="#_2-普通函数" aria-label="Permalink to &quot;（2） 普通函数&quot;">​</a></h5><ul><li>“爸爸构造函数”Function()函数也构造出普通函数</li><li>比如<code>let add = new Function(&#39;x&#39;,&#39;y&#39;,&#39;return x+y&#39;)</code>就是构造出了一个普通函数对象</li></ul><h4 id="_3、属性" tabindex="-1">3、属性 <a class="header-anchor" href="#_3、属性" aria-label="Permalink to &quot;3、属性&quot;">​</a></h4><h5 id="_1-自身属性" tabindex="-1">（1）自身属性 <a class="header-anchor" href="#_1-自身属性" aria-label="Permalink to &quot;（1）自身属性&quot;">​</a></h5><ul><li>&#39;name&#39;</li><li>&#39;length&#39;</li></ul><h5 id="_2-共有属性" tabindex="-1">（2）共有属性 <a class="header-anchor" href="#_2-共有属性" aria-label="Permalink to &quot;（2）共有属性&quot;">​</a></h5><ul><li>&#39;call&#39;</li><li>&#39;apply&#39;</li><li>&#39;bind&#39;</li></ul><h3 id="二-第二类-普通对象" tabindex="-1">（二） 第二类：普通对象 <a class="header-anchor" href="#二-第二类-普通对象" aria-label="Permalink to &quot;（二） 第二类：普通对象&quot;">​</a></h3><h4 id="定义方式" tabindex="-1">定义方式 <a class="header-anchor" href="#定义方式" aria-label="Permalink to &quot;定义方式&quot;">​</a></h4><ul><li>正规写法：<code>let 对象名 = new 0bject({&#39;name&#39;: &#39;frank&#39;})</code></li><li>简便写法：<code>let 对象名 = { &#39;name&#39;: &#39;frank&#39;, &#39;age&#39;:18 }</code></li><li>匿名写法：<code>console.log({ &#39;name&#39;: &#39;frank&#39;, &#39;age&#39;:18 })</code></li></ul><h3 id="三-第三类-数组对象" tabindex="-1">（三） 第三类：数组对象 <a class="header-anchor" href="#三-第三类-数组对象" aria-label="Permalink to &quot;（三） 第三类：数组对象&quot;">​</a></h3><h4 id="_1-定义方式" tabindex="-1">1. 定义方式 <a class="header-anchor" href="#_1-定义方式" aria-label="Permalink to &quot;1. 定义方式&quot;">​</a></h4><ul><li>正规写法：<code>let 数组名 = new Array(1,2,3)</code>//元素为1,2,3</li><li>正规写法：<code>let 数组名 = new Array(3)</code>//长度为3</li><li>简便写法：<code>let arr = [1,2,3]</code></li></ul><h4 id="_2-属性" tabindex="-1">2. 属性 <a class="header-anchor" href="#_2-属性" aria-label="Permalink to &quot;2. 属性&quot;">​</a></h4><h5 id="_1-自身属性-1" tabindex="-1">（1）自身属性 <a class="header-anchor" href="#_1-自身属性-1" aria-label="Permalink to &quot;（1）自身属性&quot;">​</a></h5><ul><li>&#39;0&#39;</li><li>&#39;1&#39;</li><li>&#39;2&#39;</li><li>&#39;length&#39;</li></ul><h5 id="_2-共有属性-mdn自己去查用法" tabindex="-1">（2）共有属性(MDN自己去查用法) <a class="header-anchor" href="#_2-共有属性-mdn自己去查用法" aria-label="Permalink to &quot;（2）共有属性(MDN自己去查用法)&quot;">​</a></h5><ul><li>&#39;push&#39;</li><li>&#39;pop&#39;</li><li>&#39;shift&#39;</li><li>&#39;unshift&#39;</li><li>&#39;join&#39;</li></ul><h2 id="六、window" tabindex="-1">六、window <a class="header-anchor" href="#六、window" aria-label="Permalink to &quot;六、window&quot;">​</a></h2><ol><li><p>浏览器提供window，很多东西挂在了window上</p></li><li><p>window变量是一个容器，用来存放window对象的地址</p></li><li><p>window对象存在Heap堆。</p></li><li><p>window对象里有很多个属性，比如</p></li></ol><ul><li>属性console指向一个对象；</li><li>属性Object指向一个对象，这个对象就是Object构造函数，着重学习这个对象的<code>prototype</code>属性，它指向所有object对象的原型</li><li>属性Array指向一个对象，这个对象就是Array构造函数，着重学习这个对象的<code>prototype</code>属性，它指向所有数组对象的原型</li></ul><ol start="5"><li>window是个对象，他是由Window函数构造的</li></ol><h2 id="七、用构造函数-原型来构造对象" tabindex="-1">七、用构造函数+原型来构造对象 <a class="header-anchor" href="#七、用构造函数-原型来构造对象" aria-label="Permalink to &quot;七、用构造函数+原型来构造对象&quot;">​</a></h2><h3 id="_1、创建一个构造函数的全过程-记得还有notability笔记-构造函数new" tabindex="-1">1、创建一个构造函数的全过程（记得还有notability笔记：构造函数new） <a class="header-anchor" href="#_1、创建一个构造函数的全过程-记得还有notability笔记-构造函数new" aria-label="Permalink to &quot;1、创建一个构造函数的全过程（记得还有notability笔记：构造函数new）&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> Dog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Function</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">width</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">return this.name=name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">//我们要用“爸爸构造函数”window.Function写一个构造函数Dog(),我们需要写入一个参数name，之后会把这个name赋值给this的name属性（this用来指代我们将要创建的新对象。），写在这里面的属性都算是自身属性。</span></span>
<span class="line"><span style="color:#FFCB6B;">Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wangwang</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">狗在汪汪叫</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">//因为Dog是个函数所以是个对象，所以有prototype属性。现在往prototype属性里面新加一个属性wangwang，这个wangwang属性的值是一个可以打印出“狗在汪汪叫”的函数。写在这里的属性都将是以后创建对象的共有属性。</span></span>
<span class="line"><span style="color:#FFCB6B;">Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">狗在跑</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">//同上</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> dog1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">小兵</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>当我们使用<code>new Dog(&#39;小兵&#39;)</code>是，其实干了四件事 ①自动创建一个空对象 ②自动将该空对象的原型指向 X.prototype（即将 <code>X.prototype</code> 保存的地址复制到<code>空对象.__proto__</code>里）这时空对象就有了共有属性 ③自动将空对象作为this关键字运行构造函数。这时空对象就有了自身属性 ④自动return this，返回我们创建好了的对象。命名为dog1。</p><h3 id="_2、同理" tabindex="-1">2、同理 <a class="header-anchor" href="#_2、同理" aria-label="Permalink to &quot;2、同理&quot;">​</a></h3><p>Object函数、Array函数全都如同上面。只不过他们在js创建时已经写好啦。</p><h3 id="_3、原型的理解新生对象-proto-构造函数-prototype" tabindex="-1">3、原型的理解<code>新生对象.__proto__ === 构造函数.prototype</code> <a class="header-anchor" href="#_3、原型的理解新生对象-proto-构造函数-prototype" aria-label="Permalink to &quot;3、原型的理解\`新生对象.__proto__ === 构造函数.prototype\`&quot;">​</a></h3><ol><li><p>每个对象出生就有<code>prototype</code>属性和<code>__proto__</code>隐藏属性。</p></li><li><p>我们只研究构造函数（大写字母开头）的<code>prototype</code>属性和新生对象（小写字母开头）的<code>_ _proto_ _</code>属性</p></li><li><p>构造函数X因为是个对象，所以有prototype属性。这个prototype属性保存了一个对象的地址，这个对象就称为原型！原型里保存了所有x对象的共有属性</p></li><li><p>被构造函数X构造出来的x对象，他有一个隐藏属性<code>__proto__</code>因为和<code>X.prototype</code>属性一样保存了相同的地址，所以也指向原型。这样x对象也就可以使用这些共有属性啦。</p></li><li><p>所有x对象的原型<code>x.__proto__ === X.prototype</code></p></li><li><p>原型让你无需重复声明共有属性，省代码，省内存</p></li><li><p><code>prototype</code>和<code>__proto__</code>都存着原型的地址，只不过就当做<code>prototype</code>挂在构造函数上， <code>__proto__</code>挂在每个新生成的对象上。</p></li><li><p>原型的地址被保存在新生对象的<code>__proto__</code>属性，也被保存在相应构造函数的<code>prototype</code>属性</p></li></ol><h3 id="_4、object构造函数" tabindex="-1">4、Object构造函数 <a class="header-anchor" href="#_4、object构造函数" aria-label="Permalink to &quot;4、Object构造函数&quot;">​</a></h3><ul><li><p>构造函数<code>Object</code>函数的<code>prototype</code>属性指向所有object对象的原型</p></li><li><p>由<code>Object</code>函数构造出来的所有对象的<code>__proto__</code>属性也指向这个原型</p></li><li><p>所有object对象的原型：<code>obj.__proto__ === Object.prototype</code></p></li><li><p><strong><code>Object.prototype</code> 是所有对象的原型!!</strong>（除了它自己），但 <code>Object.prototype</code> 有可能不是第一层原型，而是第二层原型，比如 <code>arr</code> 的第一层原型是 <code>Array.prototype</code>，第二层原型才是 <code>Object.prototye</code>.比如构造函数Array的一层原型是<code>Fuction.prototype</code>,第二层原型是<code>Object.prototye</code>。<strong>这就是原型链！！</strong>，看下图</p></li><li><p><code>Object</code> 的原型是指 <code>Object.__proto__===Function.prototype</code>，不是 <code>Object.prototype</code>，因为 <code>Object.prototye</code> 是 <code>Object</code> 构造出来的对象的原型</p></li></ul><h3 id="_5、array构造函数" tabindex="-1">5、Array构造函数 <a class="header-anchor" href="#_5、array构造函数" aria-label="Permalink to &quot;5、Array构造函数&quot;">​</a></h3><ul><li>构造函数Array函数的<code>prototype</code>属性指向所有数组对象的原型</li><li>由Array函数构造出来的所有数组对象的<code>__proto__</code>属性也指向这个原型</li><li><code>array1.__proto__ === Array.prototype</code></li><li>注意：第一层原型是 <code>Array.prototype</code>，第二层原型是 <code>Object.prototye</code>！</li><li><code>array1.__proto__.__proto__ === Object.prototype</code></li></ul><h2 id="_6、prototype属性里还有个constructor属性-表示构造者是哪个构造函数" tabindex="-1">6、<code>prototype</code>属性里还有个<code>constructor</code>属性，表示构造者是哪个构造函数 <a class="header-anchor" href="#_6、prototype属性里还有个constructor属性-表示构造者是哪个构造函数" aria-label="Permalink to &quot;6、\`prototype\`属性里还有个\`constructor\`属性，表示构造者是哪个构造函数&quot;">​</a></h2><p>①新生对象的构造者是他的构造函数</p><ul><li>比如数组对象array1的构造者是Array构造函数</li></ul><p>②所有函数的构造者都是“爸爸构造函数”window.Function</p><ul><li><p>比如Array构造函数的构造者是“爸爸构造函数”window.Function</p></li><li><p>比如“爸爸构造函数”window.Function因为是个函数，所以他也是由“爸爸构造函数”window.Function构造的。</p></li><li><p>自己构造了自己，为什么呢？其实是浏览器构造了“爸爸构造函数”window.Function，只不过浏览器把“爸爸构造函数”window.Function的构造者指定为他自身“爸爸构造函数”window.Function。我笑了。 ③window是个对象，他是由Window函数构造的（<strong>不要深究了</strong>）</p></li></ul><h3 id="_7、一些问题" tabindex="-1">7、一些问题 <a class="header-anchor" href="#_7、一些问题" aria-label="Permalink to &quot;7、一些问题&quot;">​</a></h3><ol><li>Object.prototype是所有对象的原型，也是个对象</li><li>那他是由哪个构造函数构造出来的？不知道！</li><li>那他的原型是什么？null!空！就是这样指定的！</li></ol><h3 id="_8、原型的具体分析" tabindex="-1">8、原型的具体分析 <a class="header-anchor" href="#_8、原型的具体分析" aria-label="Permalink to &quot;8、原型的具体分析&quot;">​</a></h3><p>关于原型请看我知乎的文章：<a href="https://zhuanlan.zhihu.com/p/119528167" target="_blank" rel="noreferrer">原型</a></p><h2 id="八、为什么对象要有这么多类" tabindex="-1">八、为什么对象要有这么多类 <a class="header-anchor" href="#八、为什么对象要有这么多类" aria-label="Permalink to &quot;八、为什么对象要有这么多类&quot;">​</a></h2><p>理由一</p><ul><li>有很多对象拥有一样的属性和行为，需要把它们分为同一类</li><li>如array1和array2</li><li>这样创建类似对象的时候就很方便</li></ul><p>理由二</p><ul><li>但是还有很多对象拥有其他的属性和行为，所以就需要不同的分类</li><li>比如Array / Function是不同的分类</li><li>而Object创建出来的对象，是最没有特点的对象</li></ul><h2 id="九、所以原型就是来给对象分类的" tabindex="-1">九、所以原型就是来给对象分类的 <a class="header-anchor" href="#九、所以原型就是来给对象分类的" aria-label="Permalink to &quot;九、所以原型就是来给对象分类的&quot;">​</a></h2><h2 id="十、用class来构造对象" tabindex="-1">十、用class来构造对象 <a class="header-anchor" href="#十、用class来构造对象" aria-label="Permalink to &quot;十、用class来构造对象&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">wangwang</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">狗在汪汪叫</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">狗在跑</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,132),p=[e];function t(c,r,i,y,D,F){return s(),o("div",null,p)}const A=a(n,[["render",t]]);export{C as __pageData,A as default};
