import{_ as a,o as s,c as o,U as n}from"./chunks/framework.316ef557.js";const y=JSON.parse('{"title":"React 函数组件详解","description":"","frontmatter":{},"headers":[],"relativePath":"notes/react/函数组件.md","filePath":"notes/react/函数组件.md","lastUpdated":1689776313000}'),e={name:"notes/react/函数组件.md"},l=n(`<h1 id="react-函数组件详解" tabindex="-1">React 函数组件详解 <a class="header-anchor" href="#react-函数组件详解" aria-label="Permalink to &quot;React 函数组件详解&quot;">​</a></h1><h2 id="创建方式" tabindex="-1">创建方式 <a class="header-anchor" href="#创建方式" aria-label="Permalink to &quot;创建方式&quot;">​</a></h2><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Hello </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Hello </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Hello</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="函数组件代替-class-组件" tabindex="-1">函数组件代替 class 组件 <a class="header-anchor" href="#函数组件代替-class-组件" aria-label="Permalink to &quot;函数组件代替 class 组件&quot;">​</a></h2><h3 id="面临两个问题" tabindex="-1">面临两个问题 <a class="header-anchor" href="#面临两个问题" aria-label="Permalink to &quot;面临两个问题&quot;">​</a></h3><p>函数组件没有 state 函数组件没有生命周期</p><h3 id="没有-state" tabindex="-1">没有 State <a class="header-anchor" href="#没有-state" aria-label="Permalink to &quot;没有 State&quot;">​</a></h3><p>React v16.8.0推出 Hooks API 其中的一个API 叫做 useState 可以解决问题</p><h3 id="没有生命周期" tabindex="-1">没有生命周期 <a class="header-anchor" href="#没有生命周期" aria-label="Permalink to &quot;没有生命周期&quot;">​</a></h3><p>React v16.8.0 推出 Hooks API 其中的一个API 叫做 useEffect 可以解决问题</p><h2 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h2><h3 id="模拟-componentdidmount" tabindex="-1">模拟 componentDidMount <a class="header-anchor" href="#模拟-componentdidmount" aria-label="Permalink to &quot;模拟 componentDidMount&quot;">​</a></h3><p><code>useEffect(()=&gt;{ console.log(&#39;第一次渲染&#39;)},[])</code></p><h3 id="模拟-componentdidupdate" tabindex="-1">模拟 componentDidUpdate <a class="header-anchor" href="#模拟-componentdidupdate" aria-label="Permalink to &quot;模拟 componentDidUpdate&quot;">​</a></h3><p><code>useEffect(()=&gt;{ console.log(&#39;任意属性变更&#39;)})</code><code>useEffect(()=&gt;{ console.log(&#39;n变了&#39;)},[n])</code></p><h3 id="模拟-componentwillunmount" tabindex="-1">模拟 componentWillUnmount <a class="header-anchor" href="#模拟-componentwillunmount" aria-label="Permalink to &quot;模拟 componentWillUnmount&quot;">​</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第一次渲染</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">组件要死了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="其他生命周期怎么模拟" tabindex="-1">其他生命周期怎么模拟 <a class="header-anchor" href="#其他生命周期怎么模拟" aria-label="Permalink to &quot;其他生命周期怎么模拟&quot;">​</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>函数组件执行的时候，就相当于 constructor</p><h3 id="shouldcomponentupdate" tabindex="-1">shouldComponentUpdate <a class="header-anchor" href="#shouldcomponentupdate" aria-label="Permalink to &quot;shouldComponentUpdate&quot;">​</a></h3><p>后面的 React.memo 和 useMemo 可以解决</p><h3 id="render" tabindex="-1">render <a class="header-anchor" href="#render" aria-label="Permalink to &quot;render&quot;">​</a></h3><p>函数组件的返回值就是 render的返回值</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>能用函数组件就用函数组件吧，因为它更简单</p><h2 id="插曲" tabindex="-1">插曲 <a class="header-anchor" href="#插曲" aria-label="Permalink to &quot;插曲&quot;">​</a></h2><h3 id="useupdate" tabindex="-1">useUpdate <a class="header-anchor" href="#useupdate" aria-label="Permalink to &quot;useUpdate&quot;">​</a></h3><p>第一次由 undefined 变成0时不执行函数 第二次变化时，执行函数 第三次变化时，执行函数 ....</p><h3 id="这就是自定义hook" tabindex="-1">这就是自定义Hook <a class="header-anchor" href="#这就是自定义hook" aria-label="Permalink to &quot;这就是自定义Hook&quot;">​</a></h3>`,30),t=[l];function p(r,c,i,d,h,D){return s(),o("div",null,t)}const u=a(e,[["render",p]]);export{y as __pageData,u as default};
