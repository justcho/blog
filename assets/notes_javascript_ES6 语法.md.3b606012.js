import{_ as e,o as a,c as r,U as t}from"./chunks/framework.316ef557.js";const f=JSON.parse('{"title":"ES6 语法","description":"","frontmatter":{},"headers":[],"relativePath":"notes/javascript/ES6 语法.md","filePath":"notes/javascript/ES6 语法.md","lastUpdated":1689776313000}'),o={name:"notes/javascript/ES6 语法.md"},l=t('<h1 id="es6-语法" tabindex="-1">ES6 语法 <a class="header-anchor" href="#es6-语法" aria-label="Permalink to &quot;ES6 语法&quot;">​</a></h1><h2 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h2><h3 id="块级作用域" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/block" target="_blank" rel="noreferrer">块级作用域</a> <a class="header-anchor" href="#块级作用域" aria-label="Permalink to &quot;[块级作用域](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/block)&quot;">​</a></h3><h4 id="var" tabindex="-1">var <a class="header-anchor" href="#var" aria-label="Permalink to &quot;var&quot;">​</a></h4><p>var声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</p><h4 id="let" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noreferrer">let</a> <a class="header-anchor" href="#let" aria-label="Permalink to &quot;[let](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let)&quot;">​</a></h4><p>let 声明的变量的作用域是块级的，let 不能重复声明已存在的变量</p><h4 id="const" tabindex="-1">const <a class="header-anchor" href="#const" aria-label="Permalink to &quot;const&quot;">​</a></h4><p>const声明的是常量，在后面出现的代码中不能再修改该常量的值</p><h3 id="箭头函数" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noreferrer">箭头函数</a> <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;[箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)&quot;">​</a></h3><h4 id="_1、语法更加简洁、清晰" tabindex="-1">1、语法更加简洁、清晰 <a class="header-anchor" href="#_1、语法更加简洁、清晰" aria-label="Permalink to &quot;1、语法更加简洁、清晰&quot;">​</a></h4><p>从上面的基本语法示例中可以看出，箭头函数的定义要比普通函数定义简洁、清晰得多，很快捷。</p><h4 id="_2、箭头函数不会创建自己的this-重要-深入理解" tabindex="-1">2、箭头函数不会创建自己的this（重要！！深入理解！！） <a class="header-anchor" href="#_2、箭头函数不会创建自己的this-重要-深入理解" aria-label="Permalink to &quot;2、箭头函数不会创建自己的this（重要！！深入理解！！）&quot;">​</a></h4><p>我们先来看看<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions%2FArrow_functions" target="_blank" rel="noreferrer">MDN</a>上对箭头函数<code>this</code>的解释</p><div class="language-markdown"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">箭头函数不会创建自己的this，所以它没有自己的this，它只会从自己的作用域链的上一层继承this</span></span></code></pre></div><h2 id="参数处理" tabindex="-1">参数处理 <a class="header-anchor" href="#参数处理" aria-label="Permalink to &quot;参数处理&quot;">​</a></h2><h4 id="函数默认参数" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters" target="_blank" rel="noreferrer">函数默认参数</a> <a class="header-anchor" href="#函数默认参数" aria-label="Permalink to &quot;[函数默认参数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters)&quot;">​</a></h4><p>允许在没有值或<code>undefined</code>被传入时使用默认形参</p><h4 id="剩余参数" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters" target="_blank" rel="noreferrer">剩余参数</a> <a class="header-anchor" href="#剩余参数" aria-label="Permalink to &quot;[剩余参数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters)&quot;">​</a></h4><p>允许我们将一个不定数量的参数表示为一个数组。</p><h2 id="对象属性加强" tabindex="-1">对象属性加强 <a class="header-anchor" href="#对象属性加强" aria-label="Permalink to &quot;对象属性加强&quot;">​</a></h2><ul><li>属性定义支持短语法 <code>obj = { x, y }</code></li><li>属性名支持表达式 <code>obj = {[&quot;baz&quot; + quux() ]: 42}</code></li><li>添加 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto" target="_blank" rel="noreferrer"><code>__proto__</code> 属性</a>，但不建议使用</li></ul><h2 id="解构赋值" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noreferrer">解构赋值</a> <a class="header-anchor" href="#解构赋值" aria-label="Permalink to &quot;[解构赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)&quot;">​</a></h2><p>一种 Javascript 表达式。通过**解构赋值,**可以将属性/值从对象/数组中取出,赋值给其他变量。</p><ul><li>数组匹配 <code>[ b, a ] = [ a, b ]</code></li><li>对象匹配 <code>let { a, b, c } = objABC</code></li><li>参数匹配 <code>function g ({ name: n, val: v }) {}</code></li></ul>',25),n=[l];function s(i,c,h,d,p,b){return a(),r("div",null,n)}const _=e(o,[["render",s]]);export{f as __pageData,_ as default};
