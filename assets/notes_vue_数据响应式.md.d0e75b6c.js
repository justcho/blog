import{_ as s,o as a,c as n,U as e}from"./chunks/framework.316ef557.js";const d=JSON.parse('{"title":"Vue的数据响应式","description":"","frontmatter":{},"headers":[],"relativePath":"notes/vue/数据响应式.md","filePath":"notes/vue/数据响应式.md","lastUpdated":1689776313000}'),l={name:"notes/vue/数据响应式.md"},p=e(`<h1 id="vue的数据响应式" tabindex="-1">Vue的数据响应式 <a class="header-anchor" href="#vue的数据响应式" aria-label="Permalink to &quot;Vue的数据响应式&quot;">​</a></h1><h2 id="getter和setter怎么用" tabindex="-1">getter和setter怎么用 <a class="header-anchor" href="#getter和setter怎么用" aria-label="Permalink to &quot;getter和setter怎么用&quot;">​</a></h2><p><a href="https://codesandbox.io/s/vigorous-franklin-p6l8m" target="_blank" rel="noreferrer">示例代码</a> getter ，关键词为 get ，用于获取一个值。定义时为函数，但是使用时不用加括号。  setter 用于对数据的改写</p><h2 id="object-defineproperty" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">Object.defineProperty</a> <a class="header-anchor" href="#object-defineproperty" aria-label="Permalink to &quot;[Object.defineProperty](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)&quot;">​</a></h2><p><a href="https://codesandbox.io/s/bold-heyrovsky-8jcm2" target="_blank" rel="noreferrer">示例代码</a> 可以给对象添加属性value 可以给对象添加getter / setter getter / setter用于对属性的读写进行监控</p><p>代理： 对myData对象的属性读写，全权由另一个对象vm负责 那么vm就是myData的代理 用vm.n来操作myData.n</p><h2 id="vue-对-data-做了什么" tabindex="-1">vue 对 data 做了什么 <a class="header-anchor" href="#vue-对-data-做了什么" aria-label="Permalink to &quot;vue 对 data 做了什么&quot;">​</a></h2><p>当你创建一个实例时</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> myData</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>vue 会让 vm 成为 myData 的代理。 vue 会对 myData 的所有属性进行监控。 目的 你可以使用 this 来访问到 vm.this.n === myData.n。 之所以要监控，就是防止 vue 无法得知 myData 的属性变化。 vue 得知属性变化才可以使用 render(data) 来更新 UI 和渲染页面。</p><h2 id="数据响应式" tabindex="-1">数据响应式 <a class="header-anchor" href="#数据响应式" aria-label="Permalink to &quot;数据响应式&quot;">​</a></h2><p>响应式即对外界的变化做出的反应的一种形式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:{</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>当修改 vm.n 或 data.n 时，render(data...) 中的 n 就会做出响应的响应。 这个联动的过程就是 vue 的 数据响应式。 vue 目前通过 Object.defineProperty 来实现数据响应式。</p><h2 id="在-data-中添加属性" tabindex="-1">在 data 中添加属性 <a class="header-anchor" href="#在-data-中添加属性" aria-label="Permalink to &quot;在 data 中添加属性&quot;">​</a></h2><p>Vue 虽然对 data 中的属性（或对象中的属性）进行监听和代理，但是它却没有办法进行事先的监听和代理。 如果你在初始化 data 之后再添加属性，该如何实现？</p><h3 id="一般对象" tabindex="-1">一般对象 <a class="header-anchor" href="#一般对象" aria-label="Permalink to &quot;一般对象&quot;">​</a></h3><p>对于一般的对象来说，可以在 data 中预先把所有可能用到的属性全部写出来，这样并不需要新增属性，只需要改它。 也可以通过其他方法来添加属性。 在了解以上原理后，我们来了解 Vue 提供的一个 API：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value)</span></span></code></pre></div><p>或</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$set</span><span style="color:#A6ACCD;">(object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value)</span></span></code></pre></div><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><ul><li>在 data 中添加新的属性。</li><li>自动创建为它创建代理和监听（如果没有创建过）。</li></ul><p>示例：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Vue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      {{obj.b}}</span></span>
<span class="line"><span style="color:#C3E88D;">      &lt;button @click=&#39;one&#39;&gt;One&lt;/button&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">one</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 或 this.$set(this.obj, &#39;b&#39;, 1)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3><p>因为数组本身的特殊性：数组的长度无法预测（比如所有用户的用户名，存在数组中），你无法使用 undefined 去为每一项占位，或一直使用 Vue.set( ) 方法。</p><ul><li>你可以使用 push 方法 <code>this.array.push(&#39;value&#39;)</code>，但其实数组已经被 Vue 包装了新的 push 方法。</li><li>原理就是声明一个新的类来继承数组。</li><li>各种在 Vue 实例 中使用的特例方法， 详见<a href="https://link.zhihu.com/?target=https%3A//cn.vuejs.org/v2/guide/list.html%23%25E5%258F%2598%25E5%25BC%2582%25E6%2596%25B9%25E6%25B3%2595-mutation-method" target="_blank" rel="noreferrer">数组变异方法</a>，一共有7个API。</li><li>这些方法 (API) 会自动处理对数组该项的监听和代理，并触发视图更新。</li></ul>`,28),o=[p];function t(r,c,i,y,D,F){return a(),n("div",null,o)}const A=s(l,[["render",t]]);export{d as __pageData,A as default};
