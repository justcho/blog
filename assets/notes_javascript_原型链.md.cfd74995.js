import{_ as a,o as s,c as o,U as e}from"./chunks/framework.316ef557.js";const A=JSON.parse('{"title":"原型链","description":"","frontmatter":{},"headers":[],"relativePath":"notes/javascript/原型链.md","filePath":"notes/javascript/原型链.md","lastUpdated":1691575088000}'),p={name:"notes/javascript/原型链.md"},t=e(`<h1 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h1><h2 id="原型链是什么" tabindex="-1">原型链是什么 <a class="header-anchor" href="#原型链是什么" aria-label="Permalink to &quot;原型链是什么&quot;">​</a></h2><p>比较抽象举例说明</p><h3 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h3><p>假设我们有一个普通对象 <code>x={}</code> ，这个 <code>x</code> 会有一个隐藏属性，叫做 <code>__?????__</code> ， 这个属性会指向 <code>Object.prototype</code> ，即</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__</span><span style="color:#89DDFF;">?????</span><span style="color:#A6ACCD;">__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#676E95;font-style:italic;">// 原型</span></span></code></pre></div><p>此时，我们说 <code>x</code> 的原型 是 <code>Object.prototype</code>，或者说 <code>Object.prototype</code> 是 <code>x</code> 的原型。 <br> 而这个 <code>__?????__</code> 属性的唯一作用就是用来指向 <code>x</code> 的原型的。 <br> 如果没有 <code>__?????__</code> 属性，<code>x</code> 就不知道自己的原型是谁了。</p><blockquote><p>这里的 <code>__?????__</code> 在谷歌浏览器里就叫 <code>__proto__</code></p></blockquote><h3 id="原型链-1" tabindex="-1">原型链 <a class="header-anchor" href="#原型链-1" aria-label="Permalink to &quot;原型链&quot;">​</a></h3><p>假设我们有一个数组对象 <code>a=[]</code> ，这个 <code>a</code> 也会有一个隐藏属性，叫做 <code>__?????__</code> ， 这个属性会指向 <code>Array.prototype</code> ，即</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__</span><span style="color:#89DDFF;">?????</span><span style="color:#A6ACCD;">__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span></code></pre></div><p>此时，我们说 <code>a</code> 的原型是 <code>Array.prototype</code> ，跟上面的 <code>x</code> 一样。但又有一点不一样， 那就是 <code>Array.prototype</code> 也有一个隐藏属性 <code>__?????__</code> ，指向 <code>Object.prototype</code> ， 即</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 用 x 表示 Array.prototype</span></span>
<span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__</span><span style="color:#89DDFF;">?????</span><span style="color:#A6ACCD;">__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span></code></pre></div><p>这样一来，<code>a</code> 就有两层原型：</p><ol><li><code>a</code>的原型是 <code>Array.prototype</code></li><li><code>a</code> 的原型的原型是 <code>Object.prototype</code> 于是就通过隐藏属性<code> __?????__</code> 形成了一个链条：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">===&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">===&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span></code></pre></div><p>这就是原型链。</p><h3 id="修改原型" tabindex="-1">修改原型 <a class="header-anchor" href="#修改原型" aria-label="Permalink to &quot;修改原型&quot;">​</a></h3><p>看起来只要改写 <code>x</code> 的隐藏属性 <code>__?????__</code> 就可以改变 <code>x</code> 的原型（链）</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__</span><span style="color:#89DDFF;">?????</span><span style="color:#A6ACCD;">__ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 原型</span></span></code></pre></div><p>但是这不是标准推荐的写法，为了设置 <code>x.__?????___</code> ，推荐的写法是</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(原型)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 或</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">构造函数</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 会导致 x.__?????__ === 构造函数.prototype</span></span></code></pre></div><p>在没有 Class 的情况下实现「继承」。以 <code>a ===&gt; Array.prototype ===&gt; Object.prototype</code> 为例，我们说：</p><ol><li>a 是 Array 的实例，a 拥有 <code>Array.prototype</code> 里的属性</li><li>Array 继承了 Object（注意专业术语的使用）</li><li>a 是 Object 的间接实例，a 拥有 <code>Object.prototype</code> 里的属性 这样一来，a 就既拥有 <code>Array.prototype</code> 里的属性，又拥有 <code>Object.prototype</code> 里的属 性。</li></ol><br> 优点： 简单、优雅。 <br> 缺点： 跟 class 相比，不支持私有属性。`,28),c=[t];function l(n,r,d,i,y,_){return s(),o("div",null,c)}const D=a(p,[["render",l]]);export{A as __pageData,D as default};
