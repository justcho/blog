import{_ as a,o as s,c as e,U as t}from"./chunks/framework.316ef557.js";const y=JSON.parse('{"title":"React 组件","description":"","frontmatter":{},"headers":[],"relativePath":"notes/react/React组件.md","filePath":"notes/react/React组件.md","lastUpdated":1689776313000}'),l={name:"notes/react/React组件.md"},n=t(`<h1 id="react-组件" tabindex="-1">React 组件 <a class="header-anchor" href="#react-组件" aria-label="Permalink to &quot;React 组件&quot;">​</a></h1><p>就目前而言，一个返回React元素的函数就是组件 在Vue里，一个构造选项就可以表示一个组件</p><h2 id="两种组件" tabindex="-1">两种组件 <a class="header-anchor" href="#两种组件" aria-label="Permalink to &quot;两种组件&quot;">​</a></h2><h3 id="函数组件" tabindex="-1">函数组件 <a class="header-anchor" href="#函数组件" aria-label="Permalink to &quot;函数组件&quot;">​</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Welcome</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">使用方法：</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Welcome name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">just</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><h3 id="类组件" tabindex="-1">类组件 <a class="header-anchor" href="#类组件" aria-label="Permalink to &quot;类组件&quot;">​</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Welcome</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, </span><span style="color:#89DDFF;">{this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">使用方法：</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Welcome name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">just</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><h2 id="welcome" tabindex="-1"><code>&lt;Welcome /&gt;</code> <a class="header-anchor" href="#welcome" aria-label="Permalink to &quot;\`&lt;Welcome /&gt;\`&quot;">​</a></h2><h3 id="会被翻译成什么" tabindex="-1">会被翻译成什么 <a class="header-anchor" href="#会被翻译成什么" aria-label="Permalink to &quot;会被翻译成什么&quot;">​</a></h3><ul><li><code>&lt;div /&gt;</code> 会被翻译为 <code>React.createElement(&#39;div&#39;)</code></li><li><code>&lt;Welcome /&gt;</code> 翻译为 <code>React.createElement(Welcome)</code></li></ul><h3 id="react-createelement-的逻辑" tabindex="-1">React.createElement 的逻辑 <a class="header-anchor" href="#react-createelement-的逻辑" aria-label="Permalink to &quot;React.createElement 的逻辑&quot;">​</a></h3><ul><li>如果传入一个字符串 <code>&#39;div&#39;</code> ，则会创建一个div</li><li>如果传入一个函数，则会调用该函数，获取其返回值</li><li>如果传入一个类，则在类前面加个new (这会导致执行 constructor),获取一个组件对象，然后调用对象的</li></ul><p>reder方法，获取其返回值</p><h2 id="获取数据" tabindex="-1">获取数据 <a class="header-anchor" href="#获取数据" aria-label="Permalink to &quot;获取数据&quot;">​</a></h2><h3 id="添加props" tabindex="-1">添加props <a class="header-anchor" href="#添加props" aria-label="Permalink to &quot;添加props&quot;">​</a></h3><ul><li>类组件直接读取属性 <code>this.props.xxx</code></li><li>函数组件直接读取参数 <code>props.xxx</code></li></ul><h3 id="添加state" tabindex="-1">添加state <a class="header-anchor" href="#添加state" aria-label="Permalink to &quot;添加state&quot;">​</a></h3><ul><li>类组件用 <code>this.state</code>  读， <code>this.setState</code> 写</li><li>函数组件用 <code>useState</code> 返回数组，第一项读，第二项写</li></ul><h2 id="类组件注意事项" tabindex="-1">类组件注意事项 <a class="header-anchor" href="#类组件注意事项" aria-label="Permalink to &quot;类组件注意事项&quot;">​</a></h2><h3 id="this-state-n-1-无效" tabindex="-1">this.state.n+=1 无效 <a class="header-anchor" href="#this-state-n-1-无效" aria-label="Permalink to &quot;this.state.n+=1 无效&quot;">​</a></h3><ul><li>其实n已经改变，只不过UI不会自动更新</li><li>调用setState 才会触发UI更新（异步更新）</li><li>React 没有像Vue监听data那样监听state</li></ul><h3 id="setstate会异步更新ui" tabindex="-1">setState会异步更新UI <a class="header-anchor" href="#setstate会异步更新ui" aria-label="Permalink to &quot;setState会异步更新UI&quot;">​</a></h3><p>setState 之后， state不会马上改变， 立马读state会失败 更推荐的方式是 setState(函数)</p><h3 id="this-setstate-this-state-不推荐" tabindex="-1">this.setState(this.state) 不推荐 <a class="header-anchor" href="#this-setstate-this-state-不推荐" aria-label="Permalink to &quot;this.setState(this.state) 不推荐&quot;">​</a></h3><p>React希望我们不要修改state（不可变数据） 常用代码： <code>setState({n:state.n+1})</code></p><h2 id="函数组件需要注意的地方" tabindex="-1">函数组件需要注意的地方 <a class="header-anchor" href="#函数组件需要注意的地方" aria-label="Permalink to &quot;函数组件需要注意的地方&quot;">​</a></h2><h3 id="跟类组件类似的地方" tabindex="-1">跟类组件类似的地方 <a class="header-anchor" href="#跟类组件类似的地方" aria-label="Permalink to &quot;跟类组件类似的地方&quot;">​</a></h3><p>也要通过setX(新值)来更新UI</p><h3 id="跟类组件不同的地方" tabindex="-1">跟类组件不同的地方 <a class="header-anchor" href="#跟类组件不同的地方" aria-label="Permalink to &quot;跟类组件不同的地方&quot;">​</a></h3><p>没有this,一律同参数和变量</p><h2 id="复杂-state" tabindex="-1">复杂 state <a class="header-anchor" href="#复杂-state" aria-label="Permalink to &quot;复杂 state&quot;">​</a></h2><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ol><li>类组件的 <code>setState</code> 会自动合并第一层属性</li><li>第二层使用 <code>Object.assign</code> 或者 <code>...操作符</code></li></ol><h2 id="事件绑定" tabindex="-1">事件绑定 <a class="header-anchor" href="#事件绑定" aria-label="Permalink to &quot;事件绑定&quot;">​</a></h2><h3 id="类组件的事件绑定" tabindex="-1">类组件的事件绑定 <a class="header-anchor" href="#类组件的事件绑定" aria-label="Permalink to &quot;类组件的事件绑定&quot;">​</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Son</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">addN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#F07178;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">render</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={this.</span><span style="color:#A6ACCD;">addN</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">n+1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,36),o=[n];function p(c,r,i,D,h,F){return s(),e("div",null,o)}const C=a(l,[["render",p]]);export{y as __pageData,C as default};
