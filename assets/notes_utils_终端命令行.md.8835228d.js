import{_ as a,o as t,c as e,U as o}from"./chunks/framework.316ef557.js";const q=JSON.parse('{"title":"终端命令行","description":"","frontmatter":{},"headers":[],"relativePath":"notes/utils/终端命令行.md","filePath":"notes/utils/终端命令行.md","lastUpdated":1689776313000}'),s={name:"notes/utils/终端命令行.md"},n=o(`<h1 id="终端命令行" tabindex="-1">终端命令行 <a class="header-anchor" href="#终端命令行" aria-label="Permalink to &quot;终端命令行&quot;">​</a></h1><h2 id="文件的增删改查" tabindex="-1">文件的增删改查 <a class="header-anchor" href="#文件的增删改查" aria-label="Permalink to &quot;文件的增删改查&quot;">​</a></h2><h3 id="查" tabindex="-1">查 <a class="header-anchor" href="#查" aria-label="Permalink to &quot;查&quot;">​</a></h3><p><strong>pwd</strong> 查看当前路径 <strong>ls</strong> 查看当前路径的内容 <strong>ls+路径</strong> 查看指定路径的内容 <strong>cat+路径</strong>  全部打印 <strong>head+路径</strong>  打印前10行 <strong>head ./style.css -n 14</strong> 设置参数看前14行 <strong>tail+路径</strong> 打印后10行 <strong>less+路径</strong> 翻页 <strong>退出less</strong>: 按q (q就是quit)</p><h3 id="增" tabindex="-1">增 <a class="header-anchor" href="#增" aria-label="Permalink to &quot;增&quot;">​</a></h3><h4 id="创建1-txt" tabindex="-1">创建1<code>.txt</code> <a class="header-anchor" href="#创建1-txt" aria-label="Permalink to &quot;创建1\`.txt\`&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">touch 1.txt</span></span>
<span class="line"><span style="color:#A6ACCD;">echo xxxx &gt; 2.txt</span></span>
<span class="line"><span style="color:#A6ACCD;">echo hi &gt; 2.txt</span></span></code></pre></div><p>2.<code>txt</code> 的内容只有hi, 没有xxxx</p><blockquote><p>会覆盖掉之前的文件内容，如果要追加，应该用两个&gt;&gt; <code>**echo world &gt;&gt; 2.txt**</code> 现在2.txt里面就有hi world 如果想同时添加多行内容，用参数-e, 用引号里写上\\n,&quot;a\\nb&quot; <code>**echo -e &quot;hungry\\nPanda&quot; &gt;&gt;2.txt**</code></p></blockquote><h4 id="创建目录-a" tabindex="-1">创建目录 a/ <a class="header-anchor" href="#创建目录-a" aria-label="Permalink to &quot;创建目录 a/&quot;">​</a></h4><p><code>**mkdir a/**</code></p><h4 id="创建多层目录" tabindex="-1">创建多层目录 <a class="header-anchor" href="#创建多层目录" aria-label="Permalink to &quot;创建多层目录&quot;">​</a></h4><p><code>**mkdir -p a/b/c**</code></p><h4 id="同时创建多个文件" tabindex="-1">同时创建多个文件 <a class="header-anchor" href="#同时创建多个文件" aria-label="Permalink to &quot;同时创建多个文件&quot;">​</a></h4><p><code>**touch 1.txt 2.txt**</code></p><h4 id="同时创建多个目录" tabindex="-1">同时创建多个目录 <a class="header-anchor" href="#同时创建多个目录" aria-label="Permalink to &quot;同时创建多个目录&quot;">​</a></h4><p><code>**mkdir -p a/b/c a/d/c**</code></p><h4 id="复制文件" tabindex="-1">复制文件 <a class="header-anchor" href="#复制文件" aria-label="Permalink to &quot;复制文件&quot;">​</a></h4><p><code>**cp 1.txt 2.txt**</code></p><h4 id="复制文件夹-要用-r参数" tabindex="-1">复制文件夹，要用-r参数 <a class="header-anchor" href="#复制文件夹-要用-r参数" aria-label="Permalink to &quot;复制文件夹，要用-r参数&quot;">​</a></h4><p><code>**cp -r a b**</code>     把a文件夹的内容递归地复制到b文件夹</p><h3 id="删" tabindex="-1">删 <a class="header-anchor" href="#删" aria-label="Permalink to &quot;删&quot;">​</a></h3><p><code>**rm 1.txt**</code>  删除文件 <code>**rm -r a**</code>   删除a文件夹</p><h3 id="改" tabindex="-1">改 <a class="header-anchor" href="#改" aria-label="Permalink to &quot;改&quot;">​</a></h3><h4 id="改文件名字-移动和重命名是同一个操作" tabindex="-1">改文件名字， 移动和重命名是同一个操作 <a class="header-anchor" href="#改文件名字-移动和重命名是同一个操作" aria-label="Permalink to &quot;改文件名字， 移动和重命名是同一个操作&quot;">​</a></h4><p><strong>mv 1.txt 2.txt</strong><code>**mv 1.txt  a/1.txt**</code>   把1.txt 移动到a文件夹</p><h4 id="更新文件的最后更新时间" tabindex="-1">更新文件的最后更新时间 <a class="header-anchor" href="#更新文件的最后更新时间" aria-label="Permalink to &quot;更新文件的最后更新时间&quot;">​</a></h4><p><code>**touch 文件名**</code></p><h4 id="记不住命令行用法咋办" tabindex="-1">记不住命令行用法咋办？ <a class="header-anchor" href="#记不住命令行用法咋办" aria-label="Permalink to &quot;记不住命令行用法咋办？&quot;">​</a></h4><p><code>**ls --help | less**</code>  翻页查看</p><h3 id="合并多个命令" tabindex="-1">合并多个命令 <a class="header-anchor" href="#合并多个命令" aria-label="Permalink to &quot;合并多个命令&quot;">​</a></h3><h4 id="命令1-命令2-当第一个命令成功后再执行命令2" tabindex="-1">命令1 &amp;&amp; 命令2：当第一个命令成功后再执行命令2 <a class="header-anchor" href="#命令1-命令2-当第一个命令成功后再执行命令2" aria-label="Permalink to &quot;命令1 &amp;&amp; 命令2：当第一个命令成功后再执行命令2&quot;">​</a></h4><p><code>**rm 1.txt &amp;&amp; echo**</code>  删除成功</p><h4 id="命令1-命令2" tabindex="-1">命令1; 命令2 <a class="header-anchor" href="#命令1-命令2" aria-label="Permalink to &quot;命令1; 命令2&quot;">​</a></h4><p>不管第一个操作成功还是失败都执行第二个命令 <strong><code>rm 1.txt; echo</code></strong>  执行完毕</p><h3 id="脚本文件" tabindex="-1">脚本文件 <a class="header-anchor" href="#脚本文件" aria-label="Permalink to &quot;脚本文件&quot;">​</a></h3><h4 id="命令行的本质就是可执行文件" tabindex="-1">命令行的本质就是可执行文件 <a class="header-anchor" href="#命令行的本质就是可执行文件" aria-label="Permalink to &quot;命令行的本质就是可执行文件&quot;">​</a></h4><p>如果把脚本文件的目录放进path里，可直接通过调用脚本文件名来执行程序 例如调用&quot;node&quot;, &quot;ls&quot;, &quot;cat&quot; 如果不放在path里，需要写全路径 假设我们写了一个一键搞定的脚本文件</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">mkdir $1</span></span>
<span class="line"><span style="color:#A6ACCD;">cd $1</span></span>
<span class="line"><span style="color:#A6ACCD;">touch index.html</span></span>
<span class="line"><span style="color:#A6ACCD;">touch style.css</span></span>
<span class="line"><span style="color:#A6ACCD;">touch main.js</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">echo -e &quot;&lt;!DOCTYPE html&gt;\\n&lt;h1&gt;标题&lt;/h1&gt;&lt;/html&gt;&quot; &gt;&gt; index.html</span></span></code></pre></div><p>&quot;./一键搞定 xxx&quot; 或者 &quot;sh ./一键搞定 xxx&quot;  或者 &quot;~/user/frontend/一键搞定&quot; 就可以创建一个xxx文件夹，里面有index.html, style.css, main.js三个文件</p>`,40),r=[n];function l(c,h,i,d,p,u){return t(),e("div",null,r)}const m=a(s,[["render",l]]);export{q as __pageData,m as default};
